{"version":3,"sources":["context/context.js","utils/constants.js","components/common/MenuList/index.js","components/layout/index.js","components/common/InfoCard/index.js","components/elements/SynchCard/index.js","utils/environment.js","api/api.js","components/pages/Dashboard/index.js","components/common/CopyToClipboard/index.js","utils/toast/index.js","components/elements/wallet/WalletInitializeForm/index.js","components/elements/wallet/RestoreWalletForm/index.js","components/elements/wallet/PaymentSendForm/index.js","components/elements/wallet/GetBalanceForm/index.js","components/elements/wallet/GetWalletAddressesForm/index.js","components/pages/Wallet/index.js","router/router.js","App.js","index.js","assets/images/logotype_white.svg"],"names":["ApiKeyContext","React","createContext","value","setApiKey","swaggerInterface","website","explorer","nanoErgInErg","localRouteList","dashboard","href","icon","faChartLine","title","externalRouteList","constants","faBook","faWpexplorer","faGlobe","withRouter","pathname","location","className","Object","values","map","index","key","clsx","active","to","rel","target","Layout","Navbar","expand","Brand","src","logo","alt","this","props","children","Component","InfoCard","color","SynchCard","renderActiveSynchronization","faSync","spin","renderCompleteSynchronization","faCheck","renderSynchronizationState","state","complete","getSynchronizationState","fullHeight","headersHeight","nextProps","nodeInfo","currentSynchState","nodeApiLink","NetworkError","status","message","data","statusText","name","prototype","create","Error","nodeApi","axios","baseURL","environment","timeout","crossDomain","headers","interceptors","response","use","Promise","resolve","error","reject","Dashboard","getNodeCurrentState","get","setNodeCurrentState","a","setState","setTimer","timerId","setInterval","clearInterval","peersCount","bestHeaderId","launchTime","appVersion","isMining","format","Date","CopyToClipboard","startTimer","setTimeout","showTooltip","onCopy","e","preventDefault","copy","handleOnTooltipClose","myRef","createRef","ref","onClick","faCopy","Overlay","current","show","placement","Tooltip","clearTimeout","PureComponent","toastStates","success","text","options","toast","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","bodyClassName","progressClassName","info","initialFormValues","walletPassword","mnemonicPass","WalletInitializeForm","isShowMnemonic","walletInit","post","pass","api_key","context","handleSubmit","setSubmitting","resetForm","setStatus","then","result","msg","mnemonic","catch","err","errMessage","detail","customToast","initialValues","onSubmit","isSubmitting","role","type","aria-hidden","htmlFor","id","placeholder","disabled","contextType","walletRestore","recipientAddress","amount","PaymentSendForm","isShowTransactionId","paymentSend","address","Number","GetBalanceForm","isShowBalance","getBalance","balance","toFixed","displayType","thousandSeparator","suffix","GetWalletAddressesForm","isShowWalletAddresses","getWalletAddresses","walletAddresses","addr","Wallet","RestoreWalletForm","Router","basename","exact","path","component","configure","App","setApikey","apiKey","prevState","Provider","ReactDOM","render","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.60fde85b.chunk.js","sourcesContent":["import React from 'react'\n\nexport const ApiKeyContext = React.createContext({\n  value: null,\n  setApiKey: () => {},\n})\n\nexport default {\n  ApiKeyContext,\n}\n","export default {\n  swaggerInterface: '/swagger',\n  website: 'https://ergoplatform.org',\n  explorer: 'https://explorer.ergoplatform.com',\n  nanoErgInErg: 1000000000,\n}\n","import React from 'react'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport {\n  faChartLine,\n  // faExchangeAlt,\n  faGlobe,\n  faBook,\n} from '@fortawesome/free-solid-svg-icons'\nimport clsx from 'clsx'\nimport { faWpexplorer } from '@fortawesome/free-brands-svg-icons'\nimport { withRouter, Link } from 'react-router-dom'\nimport constants from '../../../utils/constants'\n\nconst localRouteList = {\n  dashboard: {\n    href: '/',\n    icon: <FontAwesomeIcon icon={faChartLine}></FontAwesomeIcon>,\n    title: 'Dashboard',\n  },\n  // wallet: {\n  //   href: '/wallet',\n  //   icon: <FontAwesomeIcon icon={faExchangeAlt}></FontAwesomeIcon>,\n  //   title: 'Wallet',\n  // },\n}\n\nconst externalRouteList = {\n  swaggerInterface: {\n    href: constants.swaggerInterface,\n    icon: <FontAwesomeIcon icon={faBook}></FontAwesomeIcon>,\n    title: 'Swagger',\n  },\n  explorer: {\n    href: constants.explorer,\n    icon: <FontAwesomeIcon icon={faWpexplorer}></FontAwesomeIcon>,\n    title: 'Explorer',\n  },\n  website: {\n    href: constants.website,\n    icon: <FontAwesomeIcon icon={faGlobe}></FontAwesomeIcon>,\n    title: 'Website',\n  },\n}\n\nconst MenuList = ({ location: { pathname } }) => {\n  return (\n    <div>\n      <p className=\"h5 pl-3 pt-4\">Menu</p>\n      <hr className=\"mb-0\" />\n      <div className=\"list-group list-group-flush\">\n        {Object.values(localRouteList).map(({ href, icon, title }, index) => (\n          <Link\n            key={title}\n            className={clsx('list-group-item list-group-item-action', {\n              'list-group-item-dark': href === pathname,\n              active: href === pathname,\n              'border-top-0': index === 0,\n            })}\n            to={href}\n          >\n            {icon} {title}\n          </Link>\n        ))}\n      </div>\n      <p className=\"h5 pl-3 pt-4\">External links</p>\n      <hr className=\"mb-0\" />\n      <div className=\"list-group list-group-flush\">\n        {Object.values(externalRouteList).map(\n          ({ href, icon, title }, index) => (\n            <a\n              key={title}\n              className={clsx('list-group-item list-group-item-action', {\n                'border-top-0': index === 0,\n              })}\n              href={href}\n              rel=\"noopener noreferrer\"\n              target=\"_blank\"\n            >\n              {icon} {title}\n            </a>\n          ),\n        )}\n      </div>\n    </div>\n  )\n}\n\nexport default withRouter(MenuList)\n","import React, { Component } from 'react'\nimport { withRouter, Link } from 'react-router-dom'\nimport { Navbar } from 'react-bootstrap'\nimport MenuList from '../common/MenuList'\n// import ApiKeyForm from '../elements/ApiKeyForm'\nimport logo from '../../assets/images/logotype_white.svg'\nimport './index.scss'\n\nclass Layout extends Component {\n  render() {\n    return (\n      <div>\n        <Navbar className=\"navbar-background\" expand=\"lg\">\n          <Navbar.Brand className=\"navbar-brand\">\n            <Link to=\"/\">\n              <img src={logo} alt=\"logotype\" className=\"logotype\" />\n            </Link>\n          </Navbar.Brand>\n          {/* <div className=\"ml-4\">\n            <ApiKeyForm />\n          </div> */}\n        </Navbar>\n        <div className=\"sidebar\">\n          <MenuList></MenuList>\n        </div>\n        <main className=\"main-container\">\n          <div className=\"content h-100\">{this.props.children}</div>\n        </main>\n      </div>\n    )\n  }\n}\n\nexport default withRouter(Layout)\n","import React from 'react'\nimport clsx from 'clsx'\nimport './index.scss'\n\nconst InfoCard = ({ color, children, className }) => {\n  return (\n    <div\n      className={clsx(\n        {\n          'info-card': true,\n          'info-card--green': color === 'green',\n          'info-card--orange': color === 'orange',\n        },\n        className,\n      )}\n    >\n      {children}\n    </div>\n  )\n}\n\nexport default InfoCard\n","import React, { Component } from 'react'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faSync, faCheck } from '@fortawesome/free-solid-svg-icons'\nimport InfoCard from '../../common/InfoCard'\nimport './index.scss'\n\nexport default class SynchCard extends Component {\n  renderActiveSynchronization = () => (\n    <>\n      <p className=\"info-card__title\">Current node state</p>\n      <p className=\"info-card__label text-warning\">\n        <FontAwesomeIcon icon={faSync} spin></FontAwesomeIcon> Active\n        synchronization\n      </p>\n    </>\n  )\n\n  renderCompleteSynchronization = () => (\n    <>\n      <p className=\"info-card__title\">Current node state</p>\n      <p className=\"info-card__label text-success\">\n        <FontAwesomeIcon icon={faCheck}></FontAwesomeIcon> Node is synced\n      </p>\n    </>\n  )\n\n  renderSynchronizationState = state =>\n    ({\n      active: this.renderActiveSynchronization,\n      complete: this.renderCompleteSynchronization,\n    }[state])\n\n  getSynchronizationState = ({ fullHeight, headersHeight }) => {\n    if (\n      fullHeight !== null &&\n      headersHeight !== null &&\n      fullHeight === headersHeight\n    ) {\n      return 'complete'\n    }\n\n    return 'active'\n  }\n\n  shouldComponentUpdate(nextProps) {\n    if (\n      this.getSynchronizationState(nextProps) !==\n      this.getSynchronizationState(this.props.nodeInfo)\n    ) {\n      return true\n    }\n\n    return false\n  }\n\n  render() {\n    const currentSynchState = this.getSynchronizationState(this.props.nodeInfo)\n    return (\n      <InfoCard className={this.props.className}>\n        {this.renderSynchronizationState(currentSynchState)()}\n      </InfoCard>\n    )\n  }\n}\n","const appConfig = () => {\n  if (process.env.NODE_ENV === 'production') {\n    return {\n      nodeApiLink: '/',\n    }\n  }\n\n  return {\n    /* default testnet api */\n    nodeApiLink: 'http://0.0.0.0:9052/',\n  }\n}\n\nexport default {\n  ...appConfig(),\n}\n","import axios from 'axios'\nimport environment from '../utils/environment'\n\nfunction NetworkError({ status, message, data, statusText }) {\n  this.name = 'NetworkError'\n  this.message = message || statusText\n  this.status = status\n  this.data = data\n}\n\nNetworkError.prototype = Object.create(Error.prototype)\n\nconst nodeApi = axios.create({\n  baseURL: environment.nodeApiLink,\n  timeout: 1000 * 10,\n  crossDomain: true,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n})\n\nnodeApi.interceptors.response.use(\n  response => Promise.resolve(response),\n  error => Promise.reject(new NetworkError(error.response || error)),\n)\n\nexport default nodeApi\n","import React, { Fragment, Component } from 'react'\nimport { faSync } from '@fortawesome/free-solid-svg-icons'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { format } from 'date-fns'\nimport InfoCard from '../../common/InfoCard'\nimport SynchCard from '../../elements/SynchCard'\nimport nodeApi from '../../../api/api'\n\nexport default class Dashboard extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      nodeInfo: null,\n    }\n  }\n\n  componentDidMount() {\n    this.setNodeCurrentState()\n    this.setTimer()\n  }\n\n  getNodeCurrentState = () => nodeApi.get('/info')\n\n  setNodeCurrentState = async () => {\n    const { data: nodeInfo } = await this.getNodeCurrentState()\n    this.setState({ nodeInfo })\n  }\n\n  setTimer = () => {\n    const timerId = setInterval(this.setNodeCurrentState, 2000)\n    this.setState({ timerId })\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.state.timerId)\n  }\n\n  render() {\n    if (this.state.nodeInfo === null) {\n      return (\n        <Fragment>\n          <div className=\"container-fluid h-100 d-flex align-items-center justify-content-center\">\n            <FontAwesomeIcon\n              className=\"h1\"\n              icon={faSync}\n              spin\n            ></FontAwesomeIcon>\n          </div>\n        </Fragment>\n      )\n    }\n\n    const {\n      peersCount,\n      bestHeaderId,\n      launchTime,\n      fullHeight,\n      appVersion,\n      isMining,\n    } = this.state.nodeInfo\n\n    return (\n      <Fragment>\n        <div className=\"container-fluid\">\n          <div className=\"row\">\n            <div className=\"col-3 p-0 border-right mb-3\">\n              <InfoCard className=\"card rounded-0 shadow-none border-bottom\">\n                <p className=\"info-card__title\">Node version</p>\n                <p className=\"info-card__label\">{appVersion}</p>\n              </InfoCard>\n            </div>\n            <div className=\"col-3 p-0 border-right mb-3\">\n              <SynchCard\n                nodeInfo={this.state.nodeInfo}\n                className=\"border-bottom\"\n              ></SynchCard>\n            </div>\n            <div className=\"col-3 p-0 border-right mb-3\">\n              <InfoCard className=\"rounded-0 shadow-none border-bottom\">\n                <p className=\"info-card__title\">Node started at</p>\n                <p className=\"info-card__label\">\n                  {format(new Date(launchTime), 'MM-dd-yyyy HH:mm:ss')}\n                </p>\n              </InfoCard>\n            </div>\n            {fullHeight === null ? null : (\n              <div className=\"col-3 p-0 border-right mb-3\">\n                <InfoCard className=\"rounded-0 shadow-none border-bottom\">\n                  <p className=\"info-card__title\">Current height</p>\n                  <p className=\"info-card__label\">{fullHeight}</p>\n                </InfoCard>\n              </div>\n            )}\n            {bestHeaderId === null ? null : (\n              <div className=\"col-3 p-0 border-right mb-3\">\n                <InfoCard className=\"rounded-0 shadow-none border-bottom\">\n                  <p className=\"info-card__title\">Best block id</p>\n                  <p className=\"info-card__label\">{bestHeaderId}</p>\n                </InfoCard>\n              </div>\n            )}\n            <div className=\"col-3 p-0 border-right mb-3\">\n              <InfoCard className=\"rounded-0 shadow-none border-bottom\">\n                <p className=\"info-card__title\">Mining enabled</p>\n                <p className=\"info-card__label\">\n                  {isMining ? 'true' : 'false'}\n                </p>\n              </InfoCard>\n            </div>\n            <div className=\"col-3 p-0 border-right mb-3\">\n              <InfoCard className=\"rounded-0 shadow-none border-bottom\">\n                <p className=\"info-card__title\">Peers connected</p>\n                <p className=\"info-card__label\">{peersCount}</p>\n              </InfoCard>\n            </div>\n          </div>\n        </div>\n      </Fragment>\n    )\n  }\n}\n","import React from 'react'\nimport copy from 'clipboard-copy'\nimport { Overlay, Tooltip } from 'react-bootstrap'\nimport { faCopy } from '@fortawesome/free-solid-svg-icons'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\n\nclass CopyToClipboard extends React.PureComponent {\n  constructor(props) {\n    super(props)\n\n    this.myRef = React.createRef()\n    this.state = { showTooltip: false }\n  }\n\n  render() {\n    return (\n      <>\n        <a\n          href=\"#copyClipboard\"\n          ref={this.myRef}\n          onClick={this.onCopy}\n          className=\"font-weight-bold text-decoration-none\"\n        >\n          {this.props.children}\n          &nbsp;\n          <FontAwesomeIcon icon={faCopy} />\n        </a>\n        <Overlay\n          target={this.myRef.current}\n          show={this.state.showTooltip}\n          placement=\"right\"\n        >\n          <Tooltip>Copied!</Tooltip>\n        </Overlay>\n      </>\n    )\n  }\n\n  startTimer = () => {\n    const timerId = setTimeout(\n      () => this.setState({ showTooltip: false }),\n      1500,\n    )\n    this.setState({ timerId })\n  }\n\n  onCopy = e => {\n    e.preventDefault()\n    copy(this.props.children)\n    this.setState({ showTooltip: true })\n    this.startTimer()\n  }\n\n  handleOnTooltipClose = () => {\n    this.setState({ showTooltip: false })\n  }\n\n  componentWillUnmount() {\n    clearTimeout(this.state.timerId)\n  }\n}\n\nexport default CopyToClipboard\n","import { toast } from 'react-toastify'\nimport './index.scss'\n\nconst toastStates = {\n  success: (text, options) =>\n    toast.success(text, {\n      position: 'top-right',\n      autoClose: 5000,\n      hideProgressBar: false,\n      closeOnClick: true,\n      pauseOnHover: true,\n      draggable: true,\n      className: 'n-toast n-toast--success',\n      bodyClassName: 'n-toast__body',\n      progressClassName: 'n-toast__progress--success',\n      ...options,\n    }),\n  error: (text, options) =>\n    toast.error(text, {\n      position: 'top-right',\n      autoClose: 5000,\n      hideProgressBar: false,\n      closeOnClick: true,\n      pauseOnHover: true,\n      draggable: true,\n      className: 'n-toast n-toast--error',\n      bodyClassName: 'n-toast__body',\n      progressClassName: 'n-toast__progress--error',\n      ...options,\n    }),\n  info: toast.info,\n}\n\nexport default (state, text, options) =>\n  toastStates[state]\n    ? toastStates[state](text, options)\n    : new Error(`Bad toast state`)\n","import React, { PureComponent } from 'react'\nimport { Formik, Field, Form } from 'formik'\nimport nodeApi from '../../../../api/api'\nimport { ApiKeyContext } from '../../../../context/context'\nimport CopyToClipboard from '../../../common/CopyToClipboard'\nimport customToast from '../../../../utils/toast'\n\nconst initialFormValues = {\n  walletPassword: '',\n  mnemonicPass: '',\n}\n\nclass WalletInitializeForm extends PureComponent {\n  static contextType = ApiKeyContext\n\n  state = { isShowMnemonic: false }\n\n  walletInit = async ({ walletPassword, mnemonicPass }) => {\n    const { data } = await nodeApi.post(\n      '/wallet/init',\n      { pass: walletPassword, mnemonicPass },\n      {\n        headers: {\n          api_key: this.context.value,\n        },\n      },\n    )\n\n    return data\n  }\n\n  handleSubmit = (values, { setSubmitting, resetForm, setStatus }) => {\n    setStatus({ status: 'submitting' })\n    this.walletInit(values)\n      .then(result => {\n        resetForm(initialFormValues)\n        setStatus({\n          state: 'success',\n          msg: (\n            <>\n              Your wallet success initialized. Please, save your mnemonic -{' '}\n              <CopyToClipboard>{result.mnemonic}</CopyToClipboard>\n            </>\n          ),\n        })\n        this.setState({ isShowMnemonic: true })\n      })\n      .catch(err => {\n        const errMessage = err.data ? err.data.detail : err.message\n        customToast('error', errMessage)\n        setSubmitting(false)\n      })\n  }\n\n  render() {\n    return (\n      <div className=\"col-4\">\n        <div className=\"card bg-white p-4 mb-4\">\n          <h2 className=\"h5 mb-3\">Initialize Wallet</h2>\n          <Formik\n            initialValues={initialFormValues}\n            onSubmit={this.handleSubmit}\n          >\n            {({ status, isSubmitting }) => (\n              <Form>\n                {status && status.state === 'error' && (\n                  <div className=\"alert alert-danger\" role=\"alert\">\n                    {status.msg}\n                  </div>\n                )}\n                {status &&\n                  status.state === 'success' &&\n                  this.state.isShowMnemonic && (\n                    <div className=\"alert alert-success alert-dismissible\">\n                      <button\n                        type=\"button\"\n                        className=\"close\"\n                        onClick={() => this.setState({ isShowMnemonic: false })}\n                      >\n                        <span aria-hidden=\"true\">&times;</span>\n                      </button>\n                      {status.msg}\n                    </div>\n                  )}\n                <div className=\"form-group\">\n                  <label htmlFor=\"wallet-password-input\">Wallet password</label>\n                  <Field\n                    name=\"walletPassword\"\n                    type=\"password\"\n                    id=\"wallet-password-input\"\n                    className=\"form-control\"\n                    placeholder=\"Enter wallet password\"\n                  />\n                </div>\n                <div className=\"form-group\">\n                  <label htmlFor=\"mnemonic-password-input\">\n                    Mnemonic password\n                  </label>\n                  <Field\n                    name=\"mnemonicPass\"\n                    type=\"password\"\n                    id=\"mnemonic-password-input\"\n                    className=\"form-control\"\n                    placeholder=\"Enter mnemonic password\"\n                  />\n                </div>\n                <button\n                  type=\"submit\"\n                  className=\"btn btn-primary\"\n                  disabled={isSubmitting}\n                >\n                  Send\n                </button>\n              </Form>\n            )}\n          </Formik>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default WalletInitializeForm\n","import React, { PureComponent } from 'react'\nimport { Formik, Field, Form } from 'formik'\nimport nodeApi from '../../../../api/api'\nimport { ApiKeyContext } from '../../../../context/context'\nimport customToast from '../../../../utils/toast'\n\nconst initialFormValues = {\n  walletPassword: '',\n  mnemonicPass: '',\n  mnemonic: '',\n}\n\nclass WalletInitializeForm extends PureComponent {\n  static contextType = ApiKeyContext\n\n  walletRestore = async ({ walletPassword, mnemonicPass, mnemonic }) => {\n    return nodeApi.post(\n      '/wallet/restore',\n      { pass: walletPassword, mnemonicPass, mnemonic },\n      {\n        headers: {\n          api_key: this.context.value,\n        },\n      },\n    )\n  }\n\n  handleSubmit = (values, { setSubmitting, resetForm, setStatus }) => {\n    setStatus({ status: 'submitting' })\n    this.walletRestore(values)\n      .then(() => {\n        resetForm(initialFormValues)\n        customToast('success', 'Your wallet success re-stored')\n      })\n      .catch(err => {\n        const errMessage = err.data ? err.data.detail : err.message\n        customToast('error', errMessage)\n        setSubmitting(false)\n      })\n  }\n\n  render() {\n    return (\n      <div className=\"col-4\">\n        <div className=\"card bg-white p-4 mb-4\">\n          <h2 className=\"h5 mb-3\">Restore Wallet</h2>\n          <Formik\n            initialValues={initialFormValues}\n            onSubmit={this.handleSubmit}\n          >\n            {({ status, isSubmitting }) => (\n              <Form>\n                {status && status.state === 'error' && (\n                  <div className=\"alert alert-danger\" role=\"alert\">\n                    {status.msg}\n                  </div>\n                )}\n                {status && status.state === 'success' && (\n                  <div className=\"alert alert-success\">{status.msg}</div>\n                )}\n                <div className=\"form-group\">\n                  <label htmlFor=\"restore-mnemonic-input\">Mnemonic</label>\n                  <Field\n                    name=\"mnemonic\"\n                    type=\"text\"\n                    id=\"restore-mnemonic-input\"\n                    className=\"form-control\"\n                    placeholder=\"Enter mnemonic\"\n                  />\n                </div>\n                <div className=\"form-group\">\n                  <label htmlFor=\"restore-wallet-password-input\">\n                    Wallet password\n                  </label>\n                  <Field\n                    name=\"walletPassword\"\n                    type=\"password\"\n                    id=\"restore-wallet-password-input\"\n                    className=\"form-control\"\n                    placeholder=\"Enter wallet password\"\n                  />\n                </div>\n                <div className=\"form-group\">\n                  <label htmlFor=\"restore-mnemonic-password-input\">\n                    Mnemonic password\n                  </label>\n                  <Field\n                    name=\"mnemonicPass\"\n                    type=\"password\"\n                    id=\"restore-mnemonic-password-input\"\n                    className=\"form-control\"\n                    placeholder=\"Enter mnemonic password\"\n                  />\n                </div>\n                <button\n                  type=\"submit\"\n                  className=\"btn btn-primary\"\n                  disabled={isSubmitting}\n                >\n                  Send\n                </button>\n              </Form>\n            )}\n          </Formik>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default WalletInitializeForm\n","import React, { PureComponent } from 'react'\nimport { Formik, Field, Form } from 'formik'\nimport nodeApi from '../../../../api/api'\nimport { ApiKeyContext } from '../../../../context/context'\nimport customToast from '../../../../utils/toast'\nimport CopyToClipboard from '../../../common/CopyToClipboard'\nimport constants from '../../../../utils/constants'\n\nconst initialFormValues = {\n  pass: '',\n  recipientAddress: '',\n  amount: '',\n}\n\nclass PaymentSendForm extends PureComponent {\n  static contextType = ApiKeyContext\n\n  state = {\n    isShowTransactionId: false,\n  }\n\n  paymentSend = async ({ pass, recipientAddress, amount }) => {\n    await nodeApi.post(\n      '/wallet/unlock',\n      { pass },\n      {\n        headers: {\n          api_key: this.context.value,\n        },\n      },\n    )\n\n    const data = await nodeApi.post(\n      '/wallet/payment/send',\n      [\n        {\n          address: recipientAddress,\n          value: Number(amount * constants.nanoErgInErg),\n        },\n      ],\n      {\n        headers: {\n          api_key: this.context.value,\n        },\n      },\n    )\n\n    await nodeApi.get('/wallet/lock', {\n      headers: {\n        api_key: this.context.value,\n      },\n    })\n\n    return data\n  }\n\n  handleSubmit = (values, { setSubmitting, resetForm, setStatus }) => {\n    setStatus({ status: 'submitting' })\n    this.paymentSend(values)\n      .then(({ data }) => {\n        resetForm(initialFormValues)\n        setStatus({\n          state: 'success',\n          msg: (\n            <>\n              Your payment successfully sent. Your transaction ID -{' '}\n              <CopyToClipboard>{data}</CopyToClipboard>\n            </>\n          ),\n        })\n        this.setState({ isShowTransactionId: true })\n      })\n      .catch(err => {\n        const errMessage = err.data ? err.data.detail : err.message\n        customToast('error', errMessage)\n        setSubmitting(false)\n      })\n  }\n\n  render() {\n    return (\n      <div className=\"col-4\">\n        <div className=\"card bg-white p-4 mb-4\">\n          <h2 className=\"h5 mb-3\">Payment Send</h2>\n          <Formik\n            initialValues={initialFormValues}\n            onSubmit={this.handleSubmit}\n          >\n            {({ status, isSubmitting }) => (\n              <Form>\n                {status &&\n                  status.state === 'success' &&\n                  this.state.isShowTransactionId && (\n                    <div className=\"alert alert-success alert-dismissible\">\n                      <button\n                        type=\"button\"\n                        className=\"close\"\n                        onClick={() =>\n                          this.setState({ isShowTransactionId: false })\n                        }\n                      >\n                        <span aria-hidden=\"true\">&times;</span>\n                      </button>\n                      {status.msg}\n                    </div>\n                  )}\n                <div className=\"form-group\">\n                  <label htmlFor=\"wallet-password-input\">\n                    Wallet password *\n                  </label>\n                  <Field\n                    name=\"pass\"\n                    type=\"password\"\n                    id=\"wallet-password-input\"\n                    className=\"form-control\"\n                    placeholder=\"Enter wallet password\"\n                  />\n                  <small\n                    id=\"walletPasswordHelp\"\n                    className=\"form-text text-muted\"\n                  >\n                    * If you have it <b>or leave field empty</b>\n                  </small>\n                </div>\n                <div className=\"form-group\">\n                  <label htmlFor=\"recipient-address\">Recipient address</label>\n                  <Field\n                    type=\"text\"\n                    name=\"recipientAddress\"\n                    id=\"recipient-address-input\"\n                    className=\"form-control\"\n                    placeholder=\"Enter recipient address\"\n                  />\n                </div>\n                <div className=\"form-group\">\n                  <label htmlFor=\"amount\">Amount</label>\n                  <Field\n                    type=\"text\"\n                    name=\"amount\"\n                    id=\"amount-input\"\n                    className=\"form-control\"\n                    placeholder=\"Minimum 0.001 ERG\"\n                  />\n                </div>\n                <button\n                  type=\"submit\"\n                  className=\"btn btn-primary\"\n                  disabled={isSubmitting}\n                >\n                  Send\n                </button>\n              </Form>\n            )}\n          </Formik>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default PaymentSendForm\n","import React, { PureComponent } from 'react'\nimport { Formik, Field, Form } from 'formik'\nimport NumberFormat from 'react-number-format'\nimport nodeApi from '../../../../api/api'\nimport { ApiKeyContext } from '../../../../context/context'\nimport customToast from '../../../../utils/toast'\n\nconst initialFormValues = {\n  walletPassword: '',\n}\n\nclass GetBalanceForm extends PureComponent {\n  static contextType = ApiKeyContext\n\n  state = {\n    isShowBalance: false,\n  }\n\n  getBalance = async ({ walletPassword }) => {\n    await nodeApi.post(\n      '/wallet/unlock',\n      { pass: walletPassword },\n      {\n        headers: {\n          api_key: this.context.value,\n        },\n      },\n    )\n\n    const balance = await nodeApi.get('/wallet/balances', {\n      headers: {\n        api_key: this.context.value,\n      },\n    })\n\n    await nodeApi.get('/wallet/lock', {\n      headers: {\n        api_key: this.context.value,\n      },\n    })\n\n    return balance\n  }\n\n  handleSubmit = (values, { setSubmitting, resetForm, setStatus }) => {\n    setStatus({ status: 'submitting' })\n    this.getBalance(values)\n      .then(({ data: { balance } }) => {\n        resetForm(initialFormValues)\n        setStatus({\n          state: 'success',\n          msg: (\n            <>\n              Your wallet balance -{' '}\n              <NumberFormat\n                value={(balance / 1000000000).toFixed(8)}\n                displayType={'text'}\n                thousandSeparator={true}\n                suffix={' ERG'}\n                className=\"font-weight-bold\"\n              />\n            </>\n          ),\n        })\n        this.setState({ isShowBalance: true })\n      })\n      .catch(err => {\n        const errMessage = err.data ? err.data.detail : err.message\n        customToast('error', errMessage)\n        setSubmitting(false)\n      })\n  }\n\n  render() {\n    return (\n      <div className=\"col-4\">\n        <div className=\"card bg-white p-4 mb-4\">\n          <h2 className=\"h5 mb-3\">Get confirmed wallet balance</h2>\n          <Formik\n            initialValues={initialFormValues}\n            onSubmit={this.handleSubmit}\n          >\n            {({ status, isSubmitting }) => (\n              <Form>\n                {status &&\n                  status.state === 'success' &&\n                  this.state.isShowBalance && (\n                    <div className=\"alert alert-info alert-dismissible\">\n                      <button\n                        type=\"button\"\n                        className=\"close\"\n                        onClick={() => this.setState({ isShowBalance: false })}\n                      >\n                        <span aria-hidden=\"true\">&times;</span>\n                      </button>\n                      {status.msg}\n                    </div>\n                  )}\n                <div className=\"form-group\">\n                  <label htmlFor=\"wallet-password-input\">\n                    Wallet password *\n                  </label>\n                  <Field\n                    name=\"walletPassword\"\n                    type=\"password\"\n                    id=\"wallet-password-input\"\n                    className=\"form-control\"\n                    placeholder=\"Enter wallet password\"\n                  />\n                  <small\n                    id=\"walletPasswordHelp\"\n                    className=\"form-text text-muted\"\n                  >\n                    * If you have it <b>or leave field empty</b>\n                  </small>\n                </div>\n                <button\n                  type=\"submit\"\n                  className=\"btn btn-primary\"\n                  disabled={isSubmitting}\n                >\n                  Send\n                </button>\n              </Form>\n            )}\n          </Formik>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default GetBalanceForm\n","import React, { PureComponent } from 'react'\nimport { Formik, Field, Form } from 'formik'\nimport nodeApi from '../../../../api/api'\nimport { ApiKeyContext } from '../../../../context/context'\nimport customToast from '../../../../utils/toast'\nimport CopyToClipboard from '../../../common/CopyToClipboard'\n\nconst initialFormValues = {\n  walletPassword: '',\n}\n\nclass GetWalletAddressesForm extends PureComponent {\n  static contextType = ApiKeyContext\n\n  state = {\n    isShowWalletAddresses: false,\n  }\n\n  getWalletAddresses = async ({ walletPassword }) => {\n    await nodeApi.post(\n      '/wallet/unlock',\n      { pass: walletPassword },\n      {\n        headers: {\n          api_key: this.context.value,\n        },\n      },\n    )\n\n    const walletAddresses = await nodeApi.get('/wallet/addresses', {\n      headers: {\n        api_key: this.context.value,\n      },\n    })\n\n    await nodeApi.get('/wallet/lock', {\n      headers: {\n        api_key: this.context.value,\n      },\n    })\n\n    return walletAddresses\n  }\n\n  handleSubmit = (values, { setSubmitting, resetForm, setStatus }) => {\n    setStatus({ status: 'submitting' })\n    this.getWalletAddresses(values)\n      .then(({ data: walletAddresses }) => {\n        resetForm(initialFormValues)\n        setStatus({\n          state: 'success',\n          msg: (\n            <>\n              <p className=\"mb-1\">Wallet Addresses:</p>\n              <ul className=\"mb-3\">\n                {walletAddresses.map(addr => (\n                  <>\n                    <li className=\"mb-1\" key={addr}>\n                      <CopyToClipboard>{addr}</CopyToClipboard>\n                    </li>\n                  </>\n                ))}\n              </ul>\n            </>\n          ),\n        })\n        this.setState({ isShowWalletAddresses: true })\n      })\n      .catch(err => {\n        const errMessage = err.data ? err.data.detail : err.message\n        customToast('error', errMessage)\n        setSubmitting(false)\n      })\n  }\n\n  render() {\n    return (\n      <div className=\"col-4\">\n        <div className=\"card bg-white p-4 mb-4\">\n          <h2 className=\"h5 mb-3\">Get all wallet addresses</h2>\n          <Formik\n            initialValues={initialFormValues}\n            onSubmit={this.handleSubmit}\n          >\n            {({ status, isSubmitting }) => (\n              <Form>\n                {status &&\n                  status.state === 'success' &&\n                  this.state.isShowWalletAddresses && (\n                    <div className=\"alert alert-info alert-dismissible\">\n                      <button\n                        type=\"button\"\n                        className=\"close\"\n                        onClick={() =>\n                          this.setState({ isShowWalletAddresses: false })\n                        }\n                      >\n                        <span aria-hidden=\"true\">&times;</span>\n                      </button>\n                      {status.msg}\n                    </div>\n                  )}\n                <div className=\"form-group\">\n                  <label htmlFor=\"wallet-password-input\">\n                    Wallet password *\n                  </label>\n                  <Field\n                    name=\"walletPassword\"\n                    type=\"password\"\n                    id=\"wallet-password-input\"\n                    className=\"form-control\"\n                    placeholder=\"Enter wallet password\"\n                  />\n                  <small\n                    id=\"walletPasswordHelp\"\n                    className=\"form-text text-muted\"\n                  >\n                    * If you have it <b>or leave field empty</b>\n                  </small>\n                </div>\n                <button\n                  type=\"submit\"\n                  className=\"btn btn-primary\"\n                  disabled={isSubmitting}\n                >\n                  Send\n                </button>\n              </Form>\n            )}\n          </Formik>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default GetWalletAddressesForm\n","import React, { Component } from 'react'\nimport { ApiKeyContext } from '../../../context/context'\nimport WalletInitializeForm from '../../elements/wallet/WalletInitializeForm'\nimport RestoreWalletForm from '../../elements/wallet/RestoreWalletForm'\nimport PaymentSendForm from '../../elements/wallet/PaymentSendForm'\nimport GetBalanceForm from '../../elements/wallet/GetBalanceForm'\nimport GetWalletAddressesForm from '../../elements/wallet/GetWalletAddressesForm'\n\nclass Wallet extends Component {\n  static contextType = ApiKeyContext\n\n  render() {\n    if (this.context.value === '') {\n      return (\n        <div className=\"container-fluid pt-4\">\n          <p>For continue need to set API key.</p>\n        </div>\n      )\n    }\n\n    return (\n      <div className=\"container-fluid pt-4\">\n        <div className=\"row\">\n          <WalletInitializeForm />\n          <RestoreWalletForm />\n          <GetBalanceForm />\n          <GetWalletAddressesForm />\n          <PaymentSendForm />\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Wallet\n","import React from 'react'\nimport { BrowserRouter, Switch, Route } from 'react-router-dom'\nimport Layout from '../components/layout'\nimport Dashboard from '../components/pages/Dashboard'\nimport Wallet from '../components/pages/Wallet'\n\nconst Router = () => (\n  <BrowserRouter basename=\"/panel\">\n    <Layout>\n      <Switch>\n        <Route exact path=\"/\" component={Dashboard} />\n        <Route exact path=\"/wallet\" component={Wallet} />\n      </Switch>\n    </Layout>\n  </BrowserRouter>\n)\n\nexport default Router\n","import React, { Component } from 'react'\nimport { toast } from 'react-toastify'\nimport { ApiKeyContext } from './context/context'\nimport Router from './router/router'\n\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport './assets/styles/index.scss'\nimport 'react-toastify/dist/ReactToastify.min.css'\n\ntoast.configure()\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n\n    this.setApikey = apiKey => {\n      this.setState(prevState => ({\n        apiKey: { ...prevState.apiKey, value: apiKey },\n      }))\n    }\n\n    this.state = {\n      apiKey: {\n        value: '',\n        setApiKey: this.setApikey,\n      },\n    }\n  }\n\n  render() {\n    return (\n      <ApiKeyContext.Provider value={this.state.apiKey}>\n        <Router />\n      </ApiKeyContext.Provider>\n    )\n  }\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n","module.exports = __webpack_public_path__ + \"static/media/logotype_white.4dcfd639.svg\";"],"sourceRoot":""}