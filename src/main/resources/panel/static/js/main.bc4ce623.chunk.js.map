{"version":3,"sources":["utils/constants.js","components/common/MenuList/index.js","store/selectors/app.js","store/slices/appSlice.js","store/actions/appActions.js","utils/environment.js","api/api.js","utils/toast/index.js","components/elements/ApiKeyModal/index.js","store/selectors/wallet.js","store/slices/walletSlice.js","store/actions/walletActions.js","components/elements/WalletStatusModal/index.js","components/common/CopyToClipboard/index.js","components/elements/wallet/WalletInitializeForm/index.js","components/elements/wallet/RestoreWalletForm/index.js","components/elements/WalletInitModal/index.js","components/elements/NavbarInformation/index.js","components/layout/index.js","components/common/InfoCard/index.js","components/elements/SynchCard/index.js","components/pages/Dashboard/index.js","components/elements/wallet/PaymentSendForm/index.js","components/elements/wallet/GetBalanceForm/index.js","components/elements/wallet/GetWalletAddressesForm/index.js","components/pages/Wallet/index.js","router/router.js","store/reducers/rootReducer.js","store/middlewares/walletMiddleware.js","App.js","store/index.js","index.js","assets/images/logotype_white.svg"],"names":["swaggerInterface","website","explorer","nanoErgInErg","localRouteList","dashboard","href","icon","faChartLine","title","wallet","faExchangeAlt","externalRouteList","constants","faBook","faWpexplorer","faGlobe","withRouter","pathname","location","className","Object","values","map","index","key","clsx","active","to","rel","target","apiKeySelector","createSelector","state","app","apiKey","createSlice","initialState","reducers","setApiKey","action","payload","appSlice","actions","nodeApiLink","NetworkError","status","message","data","statusText","this","name","prototype","create","Error","nodeApi","axios","baseURL","environment","timeout","crossDomain","headers","interceptors","response","use","Promise","resolve","error","reject","toastStates","success","text","options","toast","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","bodyClassName","progressClassName","info","ApiKeyForm","showModal","handleShow","setState","handleHide","submitForm","get","api_key","then","props","dispatchSetApiKey","customToast","catch","renderButton","onClick","show","onHide","centered","initialValues","onSubmit","Header","closeButton","Title","Body","type","placeholder","Footer","Component","connect","dispatch","appActions","memo","walletSelector","isWalletUnlockedSelector","isWalletUnlocked","isWalletInitializedSelector","isWalletInitialized","setIsWalletUnlocked","setIsWalletInitialized","checkWalletStatus","createAction","walletSlice","WalletStatusForm","walletUnlock","pass","post","walletLock","submitWalletUnlockForm","setSubmitting","resetForm","setStatus","dispatchSetIsWalletUnlocked","err","errMessage","detail","submitWalletLockForm","confirm","aria-labelledby","isSubmitting","id","htmlFor","disabled","isWalletUnlock","walletActions","CopyToClipboard","startTimer","timerId","setTimeout","showTooltip","onCopy","e","preventDefault","copy","children","handleOnTooltipClose","myRef","React","createRef","ref","faCopy","Overlay","current","placement","Tooltip","clearTimeout","PureComponent","initialFormValues","walletPassword","mnemonicPass","WalletInitializeForm","isShowMnemonic","walletInit","a","handleSubmit","result","msg","mnemonic","role","aria-hidden","walletRestore","WalletInitModal","dispatchCheckWalletStatus","size","RestoreWalletForm","NavbarInformation","renderWalletForms","WalletStatusModal","prevProps","isApiKeySetted","ApiKeyModal","Layout","Navbar","expand","Brand","src","logo","alt","InfoCard","color","SynchCard","renderActiveSynchronization","faSync","spin","renderCompleteSynchronization","faCheck","renderSynchronizationState","complete","getSynchronizationState","fullHeight","headersHeight","nextProps","nodeInfo","currentSynchState","Dashboard","getNodeCurrentState","setNodeCurrentState","setTimer","setInterval","clearInterval","peersCount","bestHeaderId","launchTime","appVersion","isMining","format","Date","recipientAddress","amount","PaymentSendForm","isShowTransactionId","paymentSend","address","value","Number","GetBalanceForm","isShowBalance","getBalance","balance","toFixed","displayType","thousandSeparator","suffix","GetWalletAddressesForm","isShowWalletAddresses","getWalletAddresses","walletAddresses","addr","Wallet","renderState","unlocked","renderWalletUnlockedState","locked","renderWalletLockedState","initialized","renderInitializedState","Router","basename","exact","path","component","combineReducers","reducer","store","next","getState","isUnlocked","isInitialized","configure","configureStore","rootReducer","middleware","getDefaultMiddleware","walletMiddleware","App","ReactDOM","render","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.bc4ce623.chunk.js","sourcesContent":["export default {\n  swaggerInterface: '/swagger',\n  website: 'https://ergoplatform.org',\n  explorer: 'https://explorer.ergoplatform.com',\n  nanoErgInErg: 1000000000,\n}\n","import React from 'react'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport {\n  faChartLine,\n  faExchangeAlt,\n  faGlobe,\n  faBook,\n} from '@fortawesome/free-solid-svg-icons'\nimport clsx from 'clsx'\nimport { faWpexplorer } from '@fortawesome/free-brands-svg-icons'\nimport { withRouter, Link } from 'react-router-dom'\nimport constants from '../../../utils/constants'\n\nconst localRouteList = {\n  dashboard: {\n    href: '/',\n    icon: <FontAwesomeIcon icon={faChartLine}></FontAwesomeIcon>,\n    title: 'Dashboard',\n  },\n  wallet: {\n    href: '/wallet',\n    icon: <FontAwesomeIcon icon={faExchangeAlt}></FontAwesomeIcon>,\n    title: 'Wallet',\n  },\n}\n\nconst externalRouteList = {\n  swaggerInterface: {\n    href: constants.swaggerInterface,\n    icon: <FontAwesomeIcon icon={faBook}></FontAwesomeIcon>,\n    title: 'Swagger',\n  },\n  explorer: {\n    href: constants.explorer,\n    icon: <FontAwesomeIcon icon={faWpexplorer}></FontAwesomeIcon>,\n    title: 'Explorer',\n  },\n  website: {\n    href: constants.website,\n    icon: <FontAwesomeIcon icon={faGlobe}></FontAwesomeIcon>,\n    title: 'Website',\n  },\n}\n\nconst MenuList = ({ location: { pathname } }) => {\n  return (\n    <div>\n      <p className=\"h5 pl-3 pt-4\">Menu</p>\n      <hr className=\"mb-0\" />\n      <div className=\"list-group list-group-flush\">\n        {Object.values(localRouteList).map(({ href, icon, title }, index) => (\n          <Link\n            key={title}\n            className={clsx('list-group-item list-group-item-action', {\n              'list-group-item-dark': href === pathname,\n              active: href === pathname,\n              'border-top-0': index === 0,\n            })}\n            to={href}\n          >\n            {icon} {title}\n          </Link>\n        ))}\n      </div>\n      <p className=\"h5 pl-3 pt-4\">External links</p>\n      <hr className=\"mb-0\" />\n      <div className=\"list-group list-group-flush\">\n        {Object.values(externalRouteList).map(\n          ({ href, icon, title }, index) => (\n            <a\n              key={title}\n              className={clsx('list-group-item list-group-item-action', {\n                'border-top-0': index === 0,\n              })}\n              href={href}\n              rel=\"noopener noreferrer\"\n              target=\"_blank\"\n            >\n              {icon} {title}\n            </a>\n          ),\n        )}\n      </div>\n    </div>\n  )\n}\n\nexport default withRouter(MenuList)\n","import { createSelector } from 'redux-starter-kit'\n\nexport const appSelector = state => state.app\n\nexport const apiKeySelector = createSelector(\n  appSelector,\n  app => app.apiKey,\n)\n","import { createSlice } from 'redux-starter-kit'\n\nconst initialState = {\n  apiKey: '',\n}\n\nexport default createSlice({\n  initialState,\n  reducers: {\n    setApiKey: (state, action) => {\n      state.apiKey = action.payload\n    },\n  },\n})\n","import appSlice from '../slices/appSlice'\n\nexport default {\n  ...appSlice.actions,\n}\n","const appConfig = () => {\n  if (process.env.NODE_ENV === 'production') {\n    return {\n      nodeApiLink: '/',\n    }\n  }\n\n  return {\n    /* default testnet api */\n    nodeApiLink: 'http://0.0.0.0:9052/',\n  }\n}\n\nexport default {\n  ...appConfig(),\n}\n","import axios from 'axios'\nimport environment from '../utils/environment'\n\nfunction NetworkError({ status, message, data, statusText }) {\n  this.name = 'NetworkError'\n  this.message = message || statusText\n  this.status = status\n  this.data = data\n}\n\nNetworkError.prototype = Object.create(Error.prototype)\n\nconst nodeApi = axios.create({\n  baseURL: environment.nodeApiLink,\n  timeout: 1000 * 10,\n  crossDomain: true,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n})\n\nnodeApi.interceptors.response.use(\n  response => Promise.resolve(response),\n  error => Promise.reject(new NetworkError(error.response || error)),\n)\n\nexport default nodeApi\n","import { toast } from 'react-toastify'\nimport './index.scss'\n\nconst toastStates = {\n  success: (text, options) =>\n    toast.success(text, {\n      position: 'top-right',\n      autoClose: 5000,\n      hideProgressBar: false,\n      closeOnClick: true,\n      pauseOnHover: true,\n      draggable: true,\n      className: 'n-toast n-toast--success',\n      bodyClassName: 'n-toast__body',\n      progressClassName: 'n-toast__progress--success',\n      ...options,\n    }),\n  error: (text, options) =>\n    toast.error(text, {\n      position: 'top-right',\n      autoClose: 5000,\n      hideProgressBar: false,\n      closeOnClick: true,\n      pauseOnHover: true,\n      draggable: true,\n      className: 'n-toast n-toast--error',\n      bodyClassName: 'n-toast__body',\n      progressClassName: 'n-toast__progress--error',\n      ...options,\n    }),\n  info: toast.info,\n}\n\nexport default (state, text, options) =>\n  toastStates[state]\n    ? toastStates[state](text, options)\n    : new Error(`Bad toast state`)\n","import React, { Component, memo } from 'react'\nimport Modal from 'react-bootstrap/Modal'\nimport { Formik, Field, Form } from 'formik'\nimport { connect } from 'react-redux'\nimport { apiKeySelector } from '../../../store/selectors/app'\nimport appActions from '../../../store/actions/appActions'\nimport nodeApi from '../../../api/api'\nimport customToast from '../../../utils/toast'\n\nconst mapStateToProps = state => ({\n  apiKey: apiKeySelector(state),\n})\n\nconst mapDispatchToProps = dispatch => ({\n  dispatchSetApiKey: apiKey => dispatch(appActions.setApiKey(apiKey)),\n})\nclass ApiKeyForm extends Component {\n  state = {\n    showModal: false,\n  }\n\n  handleShow = () => {\n    this.setState({ showModal: true })\n  }\n\n  handleHide = () => {\n    this.setState({ showModal: false })\n  }\n\n  submitForm = ({ apiKey }) => {\n    // Check API key for random get method\n    nodeApi\n      .get('/wallet/status', {\n        headers: {\n          api_key: apiKey,\n        },\n      })\n      .then(() => {\n        this.props.dispatchSetApiKey(apiKey)\n        customToast('success', 'API key is set successfully')\n        this.handleHide()\n      })\n      .catch(() => {\n        customToast('error', 'Bad API key')\n      })\n  }\n\n  renderButton = () => {\n    if (this.props.apiKey === '') {\n      return (\n        <button onClick={this.handleShow} className=\"btn btn-success\">\n          Set API key\n        </button>\n      )\n    }\n\n    return (\n      <button onClick={this.handleShow} className=\"btn btn-primary\">\n        Update API key\n      </button>\n    )\n  }\n\n  render() {\n    return (\n      <div>\n        {this.renderButton()}\n        <Modal\n          show={this.state.showModal}\n          onHide={() => this.handleHide()}\n          centered\n        >\n          <Formik\n            initialValues={{ apiKey: this.props.apiKey }}\n            onSubmit={this.submitForm}\n          >\n            {() => (\n              <Form>\n                <Modal.Header closeButton>\n                  <Modal.Title>Authorization</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                  <p className=\"text-\">Set API key to access Node requests</p>\n                  <div className=\"input-group\">\n                    <Field\n                      type=\"text\"\n                      name=\"apiKey\"\n                      className=\"form-control\"\n                      placeholder=\"Enter API key\"\n                    />\n                  </div>\n                </Modal.Body>\n\n                <Modal.Footer>\n                  <button\n                    type=\"button\"\n                    className=\"btn btn-outline-secondary\"\n                    onClick={this.handleHide}\n                  >\n                    Close\n                  </button>\n                  <button type=\"submit\" className=\"btn btn-primary\">\n                    Save changes\n                  </button>\n                </Modal.Footer>\n              </Form>\n            )}\n          </Formik>\n        </Modal>\n      </div>\n    )\n  }\n}\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(memo(ApiKeyForm))\n","import { createSelector } from 'redux-starter-kit'\n\nexport const walletSelector = state => state.wallet\n\nexport const isWalletUnlockedSelector = createSelector(\n  walletSelector,\n  wallet => wallet.isWalletUnlocked,\n)\n\nexport const isWalletInitializedSelector = createSelector(\n  walletSelector,\n  wallet => wallet.isWalletInitialized,\n)\n","import { createSlice } from 'redux-starter-kit'\n\nconst initialState = {\n  isWalletUnlocked: null,\n  isWalletInitialized: null,\n}\n\nexport default createSlice({\n  initialState,\n  reducers: {\n    setIsWalletUnlocked: (state, { payload }) => {\n      state.isWalletUnlocked = payload\n    },\n    setIsWalletInitialized: (state, { payload }) => {\n      state.isWalletInitialized = payload\n    },\n  },\n})\n","import { createAction } from 'redux-starter-kit'\nimport walletSlice from '../slices/walletSlice'\n\nconst checkWalletStatus = createAction('checkWalletStatus')\n\nexport default {\n  ...walletSlice.actions,\n  checkWalletStatus,\n}\n","import React, { Component, memo } from 'react'\nimport Modal from 'react-bootstrap/Modal'\nimport { Formik, Field, Form } from 'formik'\nimport { connect } from 'react-redux'\nimport { isWalletUnlockedSelector } from '../../../store/selectors/wallet'\nimport walletActions from '../../../store/actions/walletActions'\nimport { apiKeySelector } from '../../../store/selectors/app'\nimport customToast from '../../../utils/toast'\nimport nodeApi from '../../../api/api'\n\nconst mapStateToProps = state => ({\n  isWalletUnlocked: isWalletUnlockedSelector(state),\n  apiKey: apiKeySelector(state),\n})\n\nconst mapDispatchToProps = dispatch => ({\n  dispatchSetIsWalletUnlocked: isWalletUnlock =>\n    dispatch(walletActions.setIsWalletUnlocked(isWalletUnlock)),\n})\n\nclass WalletStatusForm extends Component {\n  state = {\n    showModal: false,\n  }\n\n  handleShow = () => {\n    this.setState({ showModal: true })\n  }\n\n  handleHide = () => {\n    this.setState({ showModal: false })\n  }\n\n  walletUnlock = pass =>\n    nodeApi.post(\n      '/wallet/unlock',\n      { pass },\n      {\n        headers: {\n          api_key: this.props.apiKey,\n        },\n      },\n    )\n\n  walletLock = () =>\n    nodeApi.get('/wallet/lock', {\n      headers: {\n        api_key: this.props.apiKey,\n      },\n    })\n\n  submitWalletUnlockForm = (\n    { pass },\n    { setSubmitting, resetForm, setStatus },\n  ) => {\n    setStatus({ status: 'submitting' })\n    this.walletUnlock(pass)\n      .then(() => {\n        resetForm({ pass: '' })\n        customToast('success', 'Your wallet is unlocked successfully')\n        this.props.dispatchSetIsWalletUnlocked(true)\n        this.handleHide()\n      })\n      .catch(err => {\n        const errMessage = err.data ? err.data.detail : err.message\n        customToast('error', errMessage)\n        setSubmitting(false)\n      })\n  }\n\n  submitWalletLockForm = () => {\n    // eslint-disable-next-line\n    if (confirm('Are you sure want to lock wallet?')) {\n      this.walletLock()\n        .then(() => {\n          customToast('success', 'Your wallet is locked successfully')\n          this.props.dispatchSetIsWalletUnlocked(false)\n        })\n        .catch(err => {\n          const errMessage = err.data ? err.data.detail : err.message\n          customToast('error', errMessage)\n        })\n    }\n  }\n\n  renderButton = () => {\n    if (!this.props.isWalletUnlocked) {\n      return (\n        <button onClick={this.handleShow} className=\"btn btn-warning\">\n          Unlock wallet\n        </button>\n      )\n    }\n\n    return (\n      <button onClick={this.submitWalletLockForm} className=\"btn btn-success\">\n        Lock wallet\n      </button>\n    )\n  }\n\n  render() {\n    return (\n      <div>\n        {this.renderButton()}\n        <Modal\n          show={this.state.showModal}\n          onHide={() => this.handleHide()}\n          centered\n          aria-labelledby=\"example-custom-modal-styling-title\"\n        >\n          <Formik\n            initialValues={{ pass: '' }}\n            onSubmit={this.submitWalletUnlockForm}\n          >\n            {({ isSubmitting }) => (\n              <Form>\n                <Modal.Header closeButton>\n                  <Modal.Title id=\"example-custom-modal-styling-title\">\n                    Unlock wallet form\n                  </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                  <div className=\"form-group\">\n                    <label htmlFor=\"wallet-password-input\">\n                      Wallet password *\n                    </label>\n                    <Field\n                      name=\"walletPassword\"\n                      type=\"password\"\n                      id=\"wallet-password-input\"\n                      className=\"form-control\"\n                      placeholder=\"Enter wallet password\"\n                    />\n                    <small\n                      id=\"walletPasswordHelp\"\n                      className=\"form-text text-muted\"\n                    >\n                      * If you have it <b>or leave field empty</b>\n                    </small>\n                  </div>\n                </Modal.Body>\n\n                <Modal.Footer>\n                  <button\n                    className=\"btn btn-outline-secondary\"\n                    onClick={this.handleHide}\n                  >\n                    Close\n                  </button>\n                  <button\n                    type=\"submit\"\n                    className=\"btn btn-primary\"\n                    disabled={isSubmitting}\n                  >\n                    Save changes\n                  </button>\n                </Modal.Footer>\n              </Form>\n            )}\n          </Formik>\n        </Modal>\n      </div>\n    )\n  }\n}\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(memo(WalletStatusForm))\n","import React from 'react'\nimport copy from 'clipboard-copy'\nimport { Overlay, Tooltip } from 'react-bootstrap'\nimport { faCopy } from '@fortawesome/free-solid-svg-icons'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\n\nclass CopyToClipboard extends React.PureComponent {\n  constructor(props) {\n    super(props)\n\n    this.myRef = React.createRef()\n    this.state = { showTooltip: false }\n  }\n\n  render() {\n    return (\n      <>\n        <a\n          href=\"#copyClipboard\"\n          ref={this.myRef}\n          onClick={this.onCopy}\n          className=\"font-weight-bold text-decoration-none\"\n        >\n          {this.props.children}\n          &nbsp;\n          <FontAwesomeIcon icon={faCopy} />\n        </a>\n        <Overlay\n          target={this.myRef.current}\n          show={this.state.showTooltip}\n          placement=\"right\"\n        >\n          <Tooltip>Copied!</Tooltip>\n        </Overlay>\n      </>\n    )\n  }\n\n  startTimer = () => {\n    const timerId = setTimeout(\n      () => this.setState({ showTooltip: false }),\n      1500,\n    )\n    this.setState({ timerId })\n  }\n\n  onCopy = e => {\n    e.preventDefault()\n    copy(this.props.children)\n    this.setState({ showTooltip: true })\n    this.startTimer()\n  }\n\n  handleOnTooltipClose = () => {\n    this.setState({ showTooltip: false })\n  }\n\n  componentWillUnmount() {\n    clearTimeout(this.state.timerId)\n  }\n}\n\nexport default CopyToClipboard\n","import React, { Component, memo } from 'react'\nimport { Formik, Field, Form } from 'formik'\nimport nodeApi from '../../../../api/api'\nimport CopyToClipboard from '../../../common/CopyToClipboard'\nimport customToast from '../../../../utils/toast'\n\nconst initialFormValues = {\n  walletPassword: '',\n  mnemonicPass: '',\n}\n\nclass WalletInitializeForm extends Component {\n  state = { isShowMnemonic: false }\n\n  walletInit = async ({ walletPassword, mnemonicPass }) => {\n    const { data } = await nodeApi.post(\n      '/wallet/init',\n      { pass: walletPassword, mnemonicPass },\n      {\n        headers: {\n          api_key: this.props.apiKey,\n        },\n      },\n    )\n\n    return data\n  }\n\n  handleSubmit = (values, { setSubmitting, resetForm, setStatus }) => {\n    setStatus({ status: 'submitting' })\n    this.walletInit(values)\n      .then(result => {\n        resetForm(initialFormValues)\n        setStatus({\n          state: 'success',\n          msg: (\n            <>\n              Your wallet successfully initialized. Please, save your mnemonic -{' '}\n              <CopyToClipboard>{result.mnemonic}</CopyToClipboard>\n            </>\n          ),\n        })\n        this.setState({ isShowMnemonic: true })\n      })\n      .catch(err => {\n        const errMessage = err.data ? err.data.detail : err.message\n        customToast('error', errMessage)\n        setSubmitting(false)\n      })\n  }\n\n  render() {\n    return (\n      <div className=\"card bg-white p-4 mb-4\">\n        <h2 className=\"h5 mb-3\">Initialize wallet</h2>\n        <Formik initialValues={initialFormValues} onSubmit={this.handleSubmit}>\n          {({ status, isSubmitting }) => (\n            <Form>\n              {status && status.state === 'error' && (\n                <div className=\"alert alert-danger\" role=\"alert\">\n                  {status.msg}\n                </div>\n              )}\n              {status &&\n                status.state === 'success' &&\n                this.state.isShowMnemonic && (\n                  <div className=\"alert alert-success alert-dismissible\">\n                    <button\n                      type=\"button\"\n                      className=\"close\"\n                      onClick={() => this.setState({ isShowMnemonic: false })}\n                    >\n                      <span aria-hidden=\"true\">&times;</span>\n                    </button>\n                    {status.msg}\n                  </div>\n                )}\n              <div className=\"form-group\">\n                <label htmlFor=\"wallet-password-input\">Wallet password</label>\n                <Field\n                  name=\"walletPassword\"\n                  type=\"password\"\n                  id=\"wallet-password-input\"\n                  className=\"form-control\"\n                  placeholder=\"Enter wallet password\"\n                />\n              </div>\n              <div className=\"form-group\">\n                <label htmlFor=\"mnemonic-password-input\">\n                  Mnemonic password\n                </label>\n                <Field\n                  name=\"mnemonicPass\"\n                  type=\"password\"\n                  id=\"mnemonic-password-input\"\n                  className=\"form-control\"\n                  placeholder=\"Enter mnemonic password\"\n                />\n              </div>\n              <button\n                type=\"submit\"\n                className=\"btn btn-primary\"\n                disabled={isSubmitting}\n              >\n                Send\n              </button>\n            </Form>\n          )}\n        </Formik>\n      </div>\n    )\n  }\n}\n\nexport default memo(WalletInitializeForm)\n","import React, { Component, memo } from 'react'\nimport { Formik, Field, Form } from 'formik'\nimport nodeApi from '../../../../api/api'\nimport customToast from '../../../../utils/toast'\n\nconst initialFormValues = {\n  walletPassword: '',\n  mnemonicPass: '',\n  mnemonic: '',\n}\n\nclass WalletInitializeForm extends Component {\n  walletRestore = async ({ walletPassword, mnemonicPass, mnemonic }) => {\n    return nodeApi.post(\n      '/wallet/restore',\n      { pass: walletPassword, mnemonicPass, mnemonic },\n      {\n        headers: {\n          api_key: this.props.apiKey,\n        },\n      },\n    )\n  }\n\n  handleSubmit = (values, { setSubmitting, resetForm, setStatus }) => {\n    setStatus({ status: 'submitting' })\n    this.walletRestore(values)\n      .then(() => {\n        resetForm(initialFormValues)\n        customToast('success', 'Your wallet successfully re-stored')\n      })\n      .catch(err => {\n        const errMessage = err.data ? err.data.detail : err.message\n        customToast('error', errMessage)\n        setSubmitting(false)\n      })\n  }\n\n  render() {\n    return (\n      <div className=\"card bg-white p-4 mb-4\">\n        <h2 className=\"h5 mb-3\">Re-store wallet</h2>\n        <Formik initialValues={initialFormValues} onSubmit={this.handleSubmit}>\n          {({ status, isSubmitting }) => (\n            <Form>\n              {status && status.state === 'error' && (\n                <div className=\"alert alert-danger\" role=\"alert\">\n                  {status.msg}\n                </div>\n              )}\n              {status && status.state === 'success' && (\n                <div className=\"alert alert-success\">{status.msg}</div>\n              )}\n              <div className=\"form-group\">\n                <label htmlFor=\"restore-mnemonic-input\">Mnemonic</label>\n                <Field\n                  name=\"mnemonic\"\n                  type=\"text\"\n                  id=\"restore-mnemonic-input\"\n                  className=\"form-control\"\n                  placeholder=\"Enter mnemonic\"\n                />\n              </div>\n              <div className=\"form-group\">\n                <label htmlFor=\"restore-wallet-password-input\">\n                  Wallet password\n                </label>\n                <Field\n                  name=\"walletPassword\"\n                  type=\"password\"\n                  id=\"restore-wallet-password-input\"\n                  className=\"form-control\"\n                  placeholder=\"Enter wallet password\"\n                />\n              </div>\n              <div className=\"form-group\">\n                <label htmlFor=\"restore-mnemonic-password-input\">\n                  Mnemonic password\n                </label>\n                <Field\n                  name=\"mnemonicPass\"\n                  type=\"password\"\n                  id=\"restore-mnemonic-password-input\"\n                  className=\"form-control\"\n                  placeholder=\"Enter mnemonic password\"\n                />\n              </div>\n              <button\n                type=\"submit\"\n                className=\"btn btn-primary\"\n                disabled={isSubmitting}\n              >\n                Send\n              </button>\n            </Form>\n          )}\n        </Formik>\n      </div>\n    )\n  }\n}\n\nexport default memo(WalletInitializeForm)\n","import React, { Component, memo } from 'react'\nimport Modal from 'react-bootstrap/Modal'\nimport { connect } from 'react-redux'\nimport { apiKeySelector } from '../../../store/selectors/app'\nimport appActions from '../../../store/actions/appActions'\nimport WalletInitializeForm from '../wallet/WalletInitializeForm'\nimport RestoreWalletForm from '../wallet/RestoreWalletForm'\nimport walletActions from '../../../store/actions/walletActions'\n\nconst mapStateToProps = state => ({\n  apiKey: apiKeySelector(state),\n})\n\nconst mapDispatchToProps = dispatch => ({\n  dispatchCheckWalletStatus: () => dispatch(walletActions.checkWalletStatus()),\n  dispatchSetApiKey: apiKey => dispatch(appActions.setApiKey(apiKey)),\n})\n\nclass WalletInitModal extends Component {\n  state = {\n    showModal: false,\n  }\n\n  handleShow = () => {\n    this.setState({ showModal: true })\n  }\n\n  handleHide = () => {\n    this.props.dispatchCheckWalletStatus()\n    this.setState({ showModal: false })\n  }\n\n  renderButton = () => {\n    return (\n      <button onClick={this.handleShow} className=\"btn btn-danger\">\n        Initialize wallet\n      </button>\n    )\n  }\n\n  render() {\n    const { apiKey } = this.props\n\n    return (\n      <div>\n        {this.renderButton()}\n        <Modal\n          show={this.state.showModal}\n          onHide={() => this.handleHide()}\n          centered\n          size=\"lg\"\n        >\n          <Modal.Header closeButton>\n            <Modal.Title id=\"example-custom-modal-styling-title\">\n              Wallet initialization\n            </Modal.Title>\n          </Modal.Header>\n          <Modal.Body className=\"row\">\n            <div className=\"col-6\">\n              <WalletInitializeForm apiKey={apiKey} />\n            </div>\n            <div className=\"col-6\">\n              <RestoreWalletForm apiKey={apiKey} />\n            </div>\n          </Modal.Body>\n          <Modal.Footer>\n            <button\n              className=\"btn btn-outline-secondary\"\n              onClick={this.handleHide}\n            >\n              Close\n            </button>\n          </Modal.Footer>\n        </Modal>\n      </div>\n    )\n  }\n}\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(memo(WalletInitModal))\n","import React, { Component, memo } from 'react'\nimport { connect } from 'react-redux'\nimport ApiKeyModal from '../ApiKeyModal'\nimport WalletStatusModal from '../WalletStatusModal'\nimport { apiKeySelector } from '../../../store/selectors/app'\nimport { isWalletInitializedSelector } from '../../../store/selectors/wallet'\nimport WalletInitModal from '../WalletInitModal'\nimport walletActions from '../../../store/actions/walletActions'\n\nconst mapStateToProps = state => ({\n  apiKey: apiKeySelector(state),\n  isWalletInitialized: isWalletInitializedSelector(state),\n})\n\nconst mapDispatchToProps = dispatch => ({\n  dispatchCheckWalletStatus: () => dispatch(walletActions.checkWalletStatus()),\n})\n\nclass NavbarInformation extends Component {\n  renderWalletForms = () => {\n    if (this.props.isWalletInitialized === null) {\n      return <></>\n    }\n\n    if (this.props.isWalletInitialized) {\n      return (\n        <div className=\"ml-4\">\n          <WalletStatusModal />\n        </div>\n      )\n    }\n\n    return (\n      <div className=\"ml-4\">\n        <WalletInitModal />\n      </div>\n    )\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.apiKey !== '' && prevProps.apiKey !== this.props.apiKey) {\n      this.props.dispatchCheckWalletStatus()\n    }\n  }\n\n  render() {\n    const isApiKeySetted = this.props.apiKey !== ''\n\n    return (\n      <>\n        <div className=\"ml-4\">\n          <ApiKeyModal />\n        </div>\n        {isApiKeySetted && this.renderWalletForms()}\n      </>\n    )\n  }\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(memo(NavbarInformation))\n","import React, { Component } from 'react'\nimport { withRouter, Link } from 'react-router-dom'\nimport { Navbar } from 'react-bootstrap'\nimport MenuList from '../common/MenuList'\nimport logo from '../../assets/images/logotype_white.svg'\nimport './index.scss'\nimport NavbarInformation from '../elements/NavbarInformation'\n\nclass Layout extends Component {\n  render() {\n    return (\n      <div>\n        <Navbar className=\"navbar-background\" expand=\"lg\">\n          <Navbar.Brand className=\"navbar-brand\">\n            <Link to=\"/\">\n              <img src={logo} alt=\"logotype\" className=\"logotype\" />\n            </Link>\n          </Navbar.Brand>\n          <NavbarInformation />\n        </Navbar>\n        <div className=\"sidebar\">\n          <MenuList />\n        </div>\n        <main className=\"main-container\">\n          <div className=\"content h-100\">{this.props.children}</div>\n        </main>\n      </div>\n    )\n  }\n}\n\nexport default withRouter(Layout)\n","import React from 'react'\nimport clsx from 'clsx'\nimport './index.scss'\n\nconst InfoCard = ({ color, children, className }) => {\n  return (\n    <div\n      className={clsx(\n        {\n          'info-card': true,\n          'info-card--green': color === 'green',\n          'info-card--orange': color === 'orange',\n        },\n        className,\n      )}\n    >\n      {children}\n    </div>\n  )\n}\n\nexport default InfoCard\n","import React, { Component } from 'react'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faSync, faCheck } from '@fortawesome/free-solid-svg-icons'\nimport InfoCard from '../../common/InfoCard'\nimport './index.scss'\n\nexport default class SynchCard extends Component {\n  renderActiveSynchronization = () => (\n    <>\n      <p className=\"info-card__title\">Current node state</p>\n      <p className=\"info-card__label text-warning\">\n        <FontAwesomeIcon icon={faSync} spin></FontAwesomeIcon> Active\n        synchronization\n      </p>\n    </>\n  )\n\n  renderCompleteSynchronization = () => (\n    <>\n      <p className=\"info-card__title\">Current node state</p>\n      <p className=\"info-card__label text-success\">\n        <FontAwesomeIcon icon={faCheck}></FontAwesomeIcon> Node is synced\n      </p>\n    </>\n  )\n\n  renderSynchronizationState = state =>\n    ({\n      active: this.renderActiveSynchronization,\n      complete: this.renderCompleteSynchronization,\n    }[state])\n\n  getSynchronizationState = ({ fullHeight, headersHeight }) => {\n    if (\n      fullHeight !== null &&\n      headersHeight !== null &&\n      fullHeight === headersHeight\n    ) {\n      return 'complete'\n    }\n\n    return 'active'\n  }\n\n  shouldComponentUpdate(nextProps) {\n    if (\n      this.getSynchronizationState(nextProps) !==\n      this.getSynchronizationState(this.props.nodeInfo)\n    ) {\n      return true\n    }\n\n    return false\n  }\n\n  render() {\n    const currentSynchState = this.getSynchronizationState(this.props.nodeInfo)\n    return (\n      <InfoCard className={this.props.className}>\n        {this.renderSynchronizationState(currentSynchState)()}\n      </InfoCard>\n    )\n  }\n}\n","import React, { Fragment, Component } from 'react'\nimport { faSync } from '@fortawesome/free-solid-svg-icons'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { format } from 'date-fns'\nimport InfoCard from '../../common/InfoCard'\nimport SynchCard from '../../elements/SynchCard'\nimport nodeApi from '../../../api/api'\n\nexport default class Dashboard extends Component {\n  state = {\n    nodeInfo: null,\n  }\n\n  componentDidMount() {\n    this.setNodeCurrentState()\n    this.setTimer()\n  }\n\n  getNodeCurrentState = () => nodeApi.get('/info')\n\n  setNodeCurrentState = async () => {\n    const { data: nodeInfo } = await this.getNodeCurrentState()\n    this.setState({ nodeInfo })\n  }\n\n  setTimer = () => {\n    const timerId = setInterval(this.setNodeCurrentState, 2000)\n    this.setState({ timerId })\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.state.timerId)\n  }\n\n  render() {\n    if (this.state.nodeInfo === null) {\n      return (\n        <Fragment>\n          <div className=\"container-fluid h-100 d-flex align-items-center justify-content-center\">\n            <FontAwesomeIcon\n              className=\"h1\"\n              icon={faSync}\n              spin\n            ></FontAwesomeIcon>\n          </div>\n        </Fragment>\n      )\n    }\n\n    const {\n      peersCount,\n      bestHeaderId,\n      launchTime,\n      fullHeight,\n      appVersion,\n      isMining,\n    } = this.state.nodeInfo\n\n    return (\n      <Fragment>\n        <div className=\"container-fluid\">\n          <div className=\"row\">\n            <div className=\"col-3 p-0 border-right mb-3\">\n              <InfoCard className=\"card rounded-0 shadow-none border-bottom\">\n                <p className=\"info-card__title\">Node version</p>\n                <p className=\"info-card__label\">{appVersion}</p>\n              </InfoCard>\n            </div>\n            <div className=\"col-3 p-0 border-right mb-3\">\n              <SynchCard\n                nodeInfo={this.state.nodeInfo}\n                className=\"border-bottom\"\n              ></SynchCard>\n            </div>\n            <div className=\"col-3 p-0 border-right mb-3\">\n              <InfoCard className=\"rounded-0 shadow-none border-bottom\">\n                <p className=\"info-card__title\">Node started at</p>\n                <p className=\"info-card__label\">\n                  {format(new Date(launchTime), 'MM-dd-yyyy HH:mm:ss')}\n                </p>\n              </InfoCard>\n            </div>\n            {fullHeight === null ? null : (\n              <div className=\"col-3 p-0 border-right mb-3\">\n                <InfoCard className=\"rounded-0 shadow-none border-bottom\">\n                  <p className=\"info-card__title\">Current height</p>\n                  <p className=\"info-card__label\">{fullHeight}</p>\n                </InfoCard>\n              </div>\n            )}\n            {bestHeaderId === null ? null : (\n              <div className=\"col-3 p-0 border-right mb-3\">\n                <InfoCard className=\"rounded-0 shadow-none border-bottom\">\n                  <p className=\"info-card__title\">Best block id</p>\n                  <p className=\"info-card__label\">{bestHeaderId}</p>\n                </InfoCard>\n              </div>\n            )}\n            <div className=\"col-3 p-0 border-right mb-3\">\n              <InfoCard className=\"rounded-0 shadow-none border-bottom\">\n                <p className=\"info-card__title\">Mining enabled</p>\n                <p className=\"info-card__label\">\n                  {isMining ? 'true' : 'false'}\n                </p>\n              </InfoCard>\n            </div>\n            <div className=\"col-3 p-0 border-right mb-3\">\n              <InfoCard className=\"rounded-0 shadow-none border-bottom\">\n                <p className=\"info-card__title\">Peers connected</p>\n                <p className=\"info-card__label\">{peersCount}</p>\n              </InfoCard>\n            </div>\n          </div>\n        </div>\n      </Fragment>\n    )\n  }\n}\n","import React, { PureComponent } from 'react'\nimport { Formik, Field, Form } from 'formik'\nimport nodeApi from '../../../../api/api'\nimport customToast from '../../../../utils/toast'\nimport CopyToClipboard from '../../../common/CopyToClipboard'\nimport constants from '../../../../utils/constants'\n\nconst initialFormValues = {\n  recipientAddress: '',\n  amount: '',\n}\n\nclass PaymentSendForm extends PureComponent {\n  state = {\n    isShowTransactionId: false,\n  }\n\n  paymentSend = ({ recipientAddress, amount }) =>\n    nodeApi.post(\n      '/wallet/payment/send',\n      [\n        {\n          address: recipientAddress,\n          value: Number(amount * constants.nanoErgInErg),\n        },\n      ],\n      {\n        headers: {\n          api_key: this.props.apiKey,\n        },\n      },\n    )\n\n  handleSubmit = (values, { setSubmitting, resetForm, setStatus }) => {\n    setStatus({ status: 'submitting' })\n    this.paymentSend(values)\n      .then(({ data }) => {\n        resetForm(initialFormValues)\n        setStatus({\n          state: 'success',\n          msg: (\n            <>\n              Your payment successfully sent. Your transaction ID -{' '}\n              <CopyToClipboard>{data}</CopyToClipboard>\n            </>\n          ),\n        })\n        this.setState({ isShowTransactionId: true })\n      })\n      .catch(err => {\n        const errMessage = err.data ? err.data.detail : err.message\n        customToast('error', errMessage)\n        setSubmitting(false)\n      })\n  }\n\n  render() {\n    return (\n      <div className=\"col-4\">\n        <div className=\"card bg-white p-4 mb-4\">\n          <h2 className=\"h5 mb-3\">Payment send</h2>\n          <Formik\n            initialValues={initialFormValues}\n            onSubmit={this.handleSubmit}\n          >\n            {({ status, isSubmitting }) => (\n              <Form>\n                {status &&\n                  status.state === 'success' &&\n                  this.state.isShowTransactionId && (\n                    <div className=\"alert alert-success alert-dismissible\">\n                      <button\n                        type=\"button\"\n                        className=\"close\"\n                        onClick={() =>\n                          this.setState({ isShowTransactionId: false })\n                        }\n                      >\n                        <span aria-hidden=\"true\">&times;</span>\n                      </button>\n                      {status.msg}\n                    </div>\n                  )}\n                <div className=\"form-group\">\n                  <label htmlFor=\"recipient-address\">Recipient address</label>\n                  <Field\n                    type=\"text\"\n                    name=\"recipientAddress\"\n                    id=\"recipient-address-input\"\n                    className=\"form-control\"\n                    placeholder=\"Enter recipient address\"\n                  />\n                </div>\n                <div className=\"form-group\">\n                  <label htmlFor=\"amount\">Amount</label>\n                  <Field\n                    type=\"text\"\n                    name=\"amount\"\n                    id=\"amount-input\"\n                    className=\"form-control\"\n                    placeholder=\"Minimum 0.001 ERG\"\n                  />\n                </div>\n                <button\n                  type=\"submit\"\n                  className=\"btn btn-primary\"\n                  disabled={isSubmitting}\n                >\n                  Send\n                </button>\n              </Form>\n            )}\n          </Formik>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default PaymentSendForm\n","import React, { PureComponent } from 'react'\nimport { Formik, Form } from 'formik'\nimport NumberFormat from 'react-number-format'\nimport nodeApi from '../../../../api/api'\nimport customToast from '../../../../utils/toast'\n\nconst initialFormValues = {\n  walletPassword: '',\n}\n\nclass GetBalanceForm extends PureComponent {\n  state = {\n    isShowBalance: false,\n  }\n\n  getBalance = () =>\n    nodeApi.get('/wallet/balances', {\n      headers: {\n        api_key: this.props.apiKey,\n      },\n    })\n\n  handleSubmit = (values, { setSubmitting, resetForm, setStatus }) => {\n    setStatus({ status: 'submitting' })\n    this.getBalance(values)\n      .then(({ data: { balance } }) => {\n        resetForm(initialFormValues)\n        setStatus({\n          state: 'success',\n          msg: (\n            <>\n              Your wallet balance -{' '}\n              <NumberFormat\n                value={(balance / 1000000000).toFixed(8)}\n                displayType={'text'}\n                thousandSeparator={true}\n                suffix={' ERG'}\n                className=\"font-weight-bold\"\n              />\n            </>\n          ),\n        })\n        this.setState({ isShowBalance: true })\n      })\n      .catch(err => {\n        const errMessage = err.data ? err.data.detail : err.message\n        customToast('error', errMessage)\n        setSubmitting(false)\n      })\n  }\n\n  render() {\n    return (\n      <div className=\"col-4\">\n        <div className=\"card bg-white p-4 mb-4\">\n          <h2 className=\"h5 mb-3\">Get confirmed wallet balance</h2>\n          <Formik\n            initialValues={initialFormValues}\n            onSubmit={this.handleSubmit}\n          >\n            {({ status, isSubmitting }) => (\n              <Form>\n                {status &&\n                  status.state === 'success' &&\n                  this.state.isShowBalance && (\n                    <div className=\"alert alert-info alert-dismissible\">\n                      <button\n                        type=\"button\"\n                        className=\"close\"\n                        onClick={() => this.setState({ isShowBalance: false })}\n                      >\n                        <span aria-hidden=\"true\">&times;</span>\n                      </button>\n                      {status.msg}\n                    </div>\n                  )}\n                <button\n                  type=\"submit\"\n                  className=\"btn btn-primary\"\n                  disabled={isSubmitting}\n                >\n                  Get\n                </button>\n              </Form>\n            )}\n          </Formik>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default GetBalanceForm\n","import React, { PureComponent } from 'react'\nimport { Formik, Form } from 'formik'\nimport nodeApi from '../../../../api/api'\nimport customToast from '../../../../utils/toast'\nimport CopyToClipboard from '../../../common/CopyToClipboard'\n\nclass GetWalletAddressesForm extends PureComponent {\n  state = {\n    isShowWalletAddresses: false,\n  }\n\n  getWalletAddresses = () =>\n    nodeApi.get('/wallet/addresses', {\n      headers: {\n        api_key: this.props.apiKey,\n      },\n    })\n\n  handleSubmit = (values, { setSubmitting, setStatus }) => {\n    setStatus({ status: 'submitting' })\n    this.getWalletAddresses(values)\n      .then(({ data: walletAddresses }) => {\n        setStatus({\n          state: 'success',\n          msg: (\n            <>\n              <p className=\"mb-1\">Wallet Addresses:</p>\n              <ul className=\"mb-3\">\n                {walletAddresses.map(addr => (\n                  <li className=\"mb-1\" key={addr}>\n                    <CopyToClipboard>{addr}</CopyToClipboard>\n                  </li>\n                ))}\n              </ul>\n            </>\n          ),\n        })\n        this.setState({ isShowWalletAddresses: true })\n        setSubmitting(false)\n      })\n      .catch(err => {\n        const errMessage = err.data ? err.data.detail : err.message\n        customToast('error', errMessage)\n        setSubmitting(false)\n      })\n  }\n\n  render() {\n    return (\n      <div className=\"col-4\">\n        <div className=\"card bg-white p-4 mb-4\">\n          <h2 className=\"h5 mb-3\">Get all wallet addresses</h2>\n          <Formik onSubmit={this.handleSubmit}>\n            {({ status, isSubmitting }) => (\n              <Form>\n                {status &&\n                  status.state === 'success' &&\n                  this.state.isShowWalletAddresses && (\n                    <div className=\"alert alert-info alert-dismissible\">\n                      <button\n                        type=\"button\"\n                        className=\"close\"\n                        onClick={() =>\n                          this.setState({ isShowWalletAddresses: false })\n                        }\n                      >\n                        <span aria-hidden=\"true\">&times;</span>\n                      </button>\n                      {status.msg}\n                    </div>\n                  )}\n                <button\n                  type=\"submit\"\n                  className=\"btn btn-primary\"\n                  disabled={isSubmitting}\n                >\n                  Get\n                </button>\n              </Form>\n            )}\n          </Formik>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default GetWalletAddressesForm\n","import React, { Component, memo } from 'react'\nimport { connect } from 'react-redux'\nimport PaymentSendForm from '../../elements/wallet/PaymentSendForm'\nimport GetBalanceForm from '../../elements/wallet/GetBalanceForm'\nimport GetWalletAddressesForm from '../../elements/wallet/GetWalletAddressesForm'\nimport { apiKeySelector } from '../../../store/selectors/app'\nimport {\n  isWalletInitializedSelector,\n  isWalletUnlockedSelector,\n} from '../../../store/selectors/wallet'\n\nconst mapStateToProps = state => ({\n  apiKey: apiKeySelector(state),\n  isWalletInitialized: isWalletInitializedSelector(state),\n  isWalletUnlocked: isWalletUnlockedSelector(state),\n})\n\nclass Wallet extends Component {\n  renderState = state =>\n    ({\n      unlocked: apiKey => this.renderWalletUnlockedState(apiKey),\n      locked: () => this.renderWalletLockedState(),\n      initialized: apiKey => this.renderInitializedState(apiKey),\n    }[state])\n\n  renderWalletUnlockedState = apiKey => (\n    <div className=\"container-fluid pt-4\">\n      <div className=\"row\">\n        <PaymentSendForm apiKey={apiKey} />\n        <GetBalanceForm apiKey={apiKey} />\n        <GetWalletAddressesForm apiKey={apiKey} />\n      </div>\n    </div>\n  )\n\n  renderWalletLockedState = () => (\n    <div className=\"container-fluid pt-4\">\n      <p>\n        The wallet UI is locked. You need to unlock the wallet to access its UI.\n      </p>\n    </div>\n  )\n\n  renderInitializedState = () => (\n    <div className=\"container-fluid pt-4\">\n      <p>You need to initializer your wallet to access wallet UI.</p>\n    </div>\n  )\n\n  render() {\n    const { apiKey, isWalletUnlocked, isWalletInitialized } = this.props\n\n    if (apiKey === '') {\n      return (\n        <div className=\"container-fluid pt-4\">\n          <p>For continue need to set API key.</p>\n        </div>\n      )\n    }\n\n    if (!isWalletInitialized) {\n      return this.renderState('initialized')(apiKey)\n    }\n\n    if (isWalletUnlocked) {\n      return this.renderState('unlocked')(apiKey)\n    }\n\n    return this.renderState('locked')()\n  }\n}\n\nexport default connect(mapStateToProps)(memo(Wallet))\n","import React from 'react'\nimport { BrowserRouter, Switch, Route } from 'react-router-dom'\nimport Layout from '../components/layout'\nimport Dashboard from '../components/pages/Dashboard'\nimport Wallet from '../components/pages/Wallet'\n\nconst Router = () => (\n  <BrowserRouter basename=\"/panel\">\n    <Layout>\n      <Switch>\n        <Route exact path=\"/\" component={Dashboard} />\n        <Route exact path=\"/wallet\" component={Wallet} />\n      </Switch>\n    </Layout>\n  </BrowserRouter>\n)\n\nexport default Router\n","import { combineReducers } from 'redux'\nimport appSlice from '../slices/appSlice'\nimport walletSlice from '../slices/walletSlice'\n\nexport default combineReducers({\n  app: appSlice.reducer,\n  wallet: walletSlice.reducer,\n})\n","import walletActions from '../actions/walletActions'\nimport nodeApi from '../../api/api'\nimport { apiKeySelector } from '../selectors/app'\n\nexport default store => next => action => {\n  const { dispatch, getState } = store\n  const apiKey = apiKeySelector(getState())\n\n  switch (action.type) {\n    case walletActions.checkWalletStatus.type:\n      nodeApi\n        .get('/wallet/status', {\n          headers: {\n            api_key: apiKey,\n          },\n        })\n        .then(({ data: { isUnlocked, isInitialized } }) => {\n          dispatch(walletActions.setIsWalletUnlocked(isUnlocked))\n          dispatch(walletActions.setIsWalletInitialized(isInitialized))\n        })\n        .catch(() => {})\n\n      break\n\n    default:\n      break\n  }\n  next(action)\n}\n","import React from 'react'\nimport { toast } from 'react-toastify'\nimport { Provider } from 'react-redux'\nimport Router from './router/router'\nimport createStore from './store'\n\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport './assets/styles/index.scss'\nimport 'react-toastify/dist/ReactToastify.min.css'\n\ntoast.configure()\nconst store = createStore()\n\nconst App = () => {\n  return (\n    <Provider store={store}>\n      <Router />\n    </Provider>\n  )\n}\n\nexport default App\n","import { configureStore, getDefaultMiddleware } from 'redux-starter-kit'\nimport rootReducer from './reducers/rootReducer'\nimport walletMiddleware from './middlewares/walletMiddleware'\n\nexport default () => {\n  const store = configureStore({\n    reducer: rootReducer,\n    middleware: [...getDefaultMiddleware(), walletMiddleware],\n  })\n\n  return store\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n","module.exports = __webpack_public_path__ + \"static/media/logotype_white.4dcfd639.svg\";"],"sourceRoot":""}