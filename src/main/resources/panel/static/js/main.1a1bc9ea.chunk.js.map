{"version":3,"sources":["context/context.js","utils/constants.js","components/common/MenuList/index.js","components/elements/ApiKeyForm/index.js","components/layout/index.js","components/common/InfoCard/index.js","components/elements/SynchCard/index.js","utils/environment.js","api/api.js","components/pages/Dashboard/index.js","components/common/CopyToClipboard/index.js","utils/toast/index.js","components/elements/wallet/WalletInitializeForm/index.js","components/elements/wallet/RestoreWalletForm/index.js","components/elements/wallet/PaymentSendForm/index.js","components/elements/wallet/GetBalanceForm/index.js","components/elements/wallet/GetWalletAddressesForm/index.js","components/pages/Wallet/index.js","router/router.js","App.js","index.js","assets/images/logotype_white.svg"],"names":["ApiKeyContext","React","createContext","value","setApiKey","localRouteList","dashboard","href","icon","faChartLine","title","wallet","faExchangeAlt","externalRouteList","swaggerInterface","constants","faBook","explorer","faWpexplorer","website","faGlobe","withRouter","pathname","location","className","Object","values","map","index","key","clsx","active","to","rel","target","ApiKeyForm","props","handleShow","setState","showModal","handleHide","submitForm","apiKey","context","renderButton","onClick","renderLink","state","inputApiKey","this","show","onHide","centered","aria-labelledby","initialValues","onSubmit","Header","closeButton","Title","id","Body","type","name","placeholder","Footer","Component","contextType","Layout","Navbar","expand","Brand","src","logo","alt","children","InfoCard","color","SynchCard","renderActiveSynchronization","faSync","spin","renderCompleteSynchronization","faCheck","renderSynchronizationState","complete","getSynchronizationState","fullHeight","headersHeight","nextProps","nodeInfo","currentSynchState","nodeApiLink","NetworkError","status","message","data","statusText","prototype","create","Error","nodeApi","axios","baseURL","environment","timeout","crossDomain","headers","interceptors","response","use","Promise","resolve","error","reject","Dashboard","getNodeCurrentState","get","setNodeCurrentState","a","setTimer","timerId","setInterval","clearInterval","peersCount","bestHeaderId","launchTime","appVersion","isMining","format","Date","CopyToClipboard","startTimer","setTimeout","showTooltip","onCopy","e","preventDefault","copy","handleOnTooltipClose","myRef","createRef","ref","faCopy","Overlay","current","placement","Tooltip","clearTimeout","PureComponent","toastStates","success","text","options","toast","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","bodyClassName","progressClassName","info","initialFormValues","pass","mnemonicPass","WalletInitializeForm","isShowMnemonic","walletInit","post","api_key","handleSubmit","setSubmitting","resetForm","setStatus","then","result","msg","mnemonic","catch","err","errMessage","detail","customToast","isSubmitting","role","aria-hidden","htmlFor","disabled","walletPassword","walletRestore","recipientAddress","amount","PaymentSendForm","isShowTransactionId","paymentSend","address","Number","GetBalanceForm","isShowBalance","getBalance","balance","toFixed","displayType","thousandSeparator","suffix","GetWalletAddressesForm","isShowWalletAddresses","getWalletAddresses","walletAddresses","walletMinerAddress","rewardAddress","addr","Wallet","RestoreWalletForm","Router","basename","exact","path","component","configure","App","setApikey","prevState","Provider","ReactDOM","render","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.1a1bc9ea.chunk.js","sourcesContent":["import React from 'react'\n\nexport const ApiKeyContext = React.createContext({\n  value: null,\n  setApiKey: () => {},\n})\n\nexport default {\n  ApiKeyContext,\n}\n","export default {\n  swaggerInterface: '/swagger',\n  website: 'https://ergoplatform.org',\n  explorer: 'https://explorer.ergoplatform.com',\n}\n","import React from 'react'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport {\n  faChartLine,\n  faExchangeAlt,\n  faGlobe,\n  faBook,\n} from '@fortawesome/free-solid-svg-icons'\nimport clsx from 'clsx'\nimport { faWpexplorer } from '@fortawesome/free-brands-svg-icons'\nimport { withRouter, Link } from 'react-router-dom'\nimport constants from '../../../utils/constants'\n\nconst localRouteList = {\n  dashboard: {\n    href: '/',\n    icon: <FontAwesomeIcon icon={faChartLine}></FontAwesomeIcon>,\n    title: 'Dashboard',\n  },\n  wallet: {\n    href: '/wallet',\n    icon: <FontAwesomeIcon icon={faExchangeAlt}></FontAwesomeIcon>,\n    title: 'Wallet',\n  },\n}\n\nconst externalRouteList = {\n  swaggerInterface: {\n    href: constants.swaggerInterface,\n    icon: <FontAwesomeIcon icon={faBook}></FontAwesomeIcon>,\n    title: 'Swagger',\n  },\n  explorer: {\n    href: constants.explorer,\n    icon: <FontAwesomeIcon icon={faWpexplorer}></FontAwesomeIcon>,\n    title: 'Explorer',\n  },\n  website: {\n    href: constants.website,\n    icon: <FontAwesomeIcon icon={faGlobe}></FontAwesomeIcon>,\n    title: 'Website',\n  },\n}\n\nconst MenuList = ({ location: { pathname } }) => {\n  return (\n    <div>\n      <p className=\"h5 pl-3 pt-4\">Menu</p>\n      <hr className=\"mb-0\" />\n      <div className=\"list-group list-group-flush\">\n        {Object.values(localRouteList).map(({ href, icon, title }, index) => (\n          <Link\n            key={title}\n            className={clsx('list-group-item list-group-item-action', {\n              'list-group-item-dark': href === pathname,\n              active: href === pathname,\n              'border-top-0': index === 0,\n            })}\n            to={href}\n          >\n            {icon} {title}\n          </Link>\n        ))}\n      </div>\n      <p className=\"h5 pl-3 pt-4\">External links</p>\n      <hr className=\"mb-0\" />\n      <div className=\"list-group list-group-flush\">\n        {Object.values(externalRouteList).map(\n          ({ href, icon, title }, index) => (\n            <a\n              key={title}\n              className={clsx('list-group-item list-group-item-action', {\n                'border-top-0': index === 0,\n              })}\n              href={href}\n              rel=\"noopener noreferrer\"\n              target=\"_blank\"\n            >\n              {icon} {title}\n            </a>\n          ),\n        )}\n      </div>\n    </div>\n  )\n}\n\nexport default withRouter(MenuList)\n","import React, { Component } from 'react'\nimport Modal from 'react-bootstrap/Modal'\nimport { Formik, Field, Form } from 'formik'\nimport { ApiKeyContext } from '../../../context/context'\n\nexport default class ApiKeyForm extends Component {\n  static contextType = ApiKeyContext\n\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      showModal: false,\n      inputApiKey: '',\n    }\n  }\n\n  handleShow = () => {\n    this.setState({ showModal: true })\n  }\n\n  handleHide = () => {\n    this.setState({ showModal: false })\n  }\n\n  submitForm = ({ apiKey }) => {\n    this.context.setApiKey(apiKey)\n    this.handleHide()\n  }\n\n  renderButton = () => {\n    if (this.context.value === '') {\n      return (\n        <button onClick={this.handleShow} className=\"btn btn-warning\">\n          Set API key\n        </button>\n      )\n    }\n\n    return (\n      <button onClick={this.handleShow} className=\"btn btn-outline-light\">\n        Update API key\n      </button>\n    )\n  }\n\n  renderLink = () => (\n    <a href=\"#modal-root\" onClick={this.handleShow}>\n      Set API key\n    </a>\n  )\n\n  render() {\n    return (\n      <div>\n        {this.renderButton()}\n        <Modal\n          show={this.state.showModal}\n          onHide={() => this.handleHide()}\n          centered\n          aria-labelledby=\"example-custom-modal-styling-title\"\n        >\n          <Formik\n            initialValues={{ apiKey: this.context.value }}\n            onSubmit={this.submitForm}\n          >\n            {() => (\n              <Form>\n                <Modal.Header closeButton>\n                  <Modal.Title id=\"example-custom-modal-styling-title\">\n                    Authorization\n                  </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                  <p className=\"text-\">Set API key to access Node requests</p>\n                  <div className=\"input-group\">\n                    <Field\n                      type=\"text\"\n                      name=\"apiKey\"\n                      className=\"form-control\"\n                      placeholder=\"Enter API key\"\n                    />\n                  </div>\n                </Modal.Body>\n\n                <Modal.Footer>\n                  <button\n                    className=\"btn btn-outline-secondary\"\n                    onClick={this.handleHide}\n                  >\n                    Close\n                  </button>\n                  <button type=\"submit\" className=\"btn btn-primary\">\n                    Save changes\n                  </button>\n                </Modal.Footer>\n              </Form>\n            )}\n          </Formik>\n        </Modal>\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport { withRouter, Link } from 'react-router-dom'\nimport { Navbar } from 'react-bootstrap'\nimport MenuList from '../common/MenuList'\nimport ApiKeyForm from '../elements/ApiKeyForm'\nimport logo from '../../assets/images/logotype_white.svg'\nimport './index.scss'\n\nclass Layout extends Component {\n  render() {\n    return (\n      <div>\n        <Navbar className=\"navbar-background\" expand=\"lg\">\n          <Navbar.Brand className=\"navbar-brand\">\n            <Link to=\"/\">\n              <img src={logo} alt=\"logotype\" className=\"logotype\" />\n            </Link>\n          </Navbar.Brand>\n          <div className=\"ml-4\">\n            <ApiKeyForm />\n          </div>\n        </Navbar>\n        <div className=\"sidebar\">\n          <MenuList></MenuList>\n        </div>\n        <main className=\"main-container\">\n          <div className=\"content h-100\">{this.props.children}</div>\n        </main>\n      </div>\n    )\n  }\n}\n\nexport default withRouter(Layout)\n","import React from 'react'\nimport clsx from 'clsx'\nimport './index.scss'\n\nconst InfoCard = ({ color, children, className }) => {\n  return (\n    <div\n      className={clsx(\n        {\n          'info-card': true,\n          'info-card--green': color === 'green',\n          'info-card--orange': color === 'orange',\n        },\n        className,\n      )}\n    >\n      {children}\n    </div>\n  )\n}\n\nexport default InfoCard\n","import React, { Component } from 'react'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faSync, faCheck } from '@fortawesome/free-solid-svg-icons'\nimport InfoCard from '../../common/InfoCard'\nimport './index.scss'\n\nexport default class SynchCard extends Component {\n  renderActiveSynchronization = () => (\n    <>\n      <p className=\"info-card__title\">Current node state</p>\n      <p className=\"info-card__label text-warning\">\n        <FontAwesomeIcon icon={faSync} spin></FontAwesomeIcon> Active\n        synchronization\n      </p>\n    </>\n  )\n\n  renderCompleteSynchronization = () => (\n    <>\n      <p className=\"info-card__title\">Current node state</p>\n      <p className=\"info-card__label text-success\">\n        <FontAwesomeIcon icon={faCheck}></FontAwesomeIcon> Node is synced\n      </p>\n    </>\n  )\n\n  renderSynchronizationState = state =>\n    ({\n      active: this.renderActiveSynchronization,\n      complete: this.renderCompleteSynchronization,\n    }[state])\n\n  getSynchronizationState = ({ fullHeight, headersHeight }) => {\n    if (\n      fullHeight !== null &&\n      headersHeight !== null &&\n      fullHeight === headersHeight\n    ) {\n      return 'complete'\n    }\n\n    return 'active'\n  }\n\n  shouldComponentUpdate(nextProps) {\n    if (\n      this.getSynchronizationState(nextProps) !==\n      this.getSynchronizationState(this.props.nodeInfo)\n    ) {\n      return true\n    }\n\n    return false\n  }\n\n  render() {\n    const currentSynchState = this.getSynchronizationState(this.props.nodeInfo)\n    return (\n      <InfoCard className={this.props.className}>\n        {this.renderSynchronizationState(currentSynchState)()}\n      </InfoCard>\n    )\n  }\n}\n","const appConfig = () => {\n  if (process.env.NODE_ENV === 'production') {\n    return {\n      nodeApiLink: '/',\n    }\n  }\n\n  return {\n    /* default testnet api */\n    nodeApiLink: 'http://0.0.0.0:9052/',\n  }\n}\n\nexport default {\n  ...appConfig(),\n}\n","import axios from 'axios'\nimport environment from '../utils/environment'\n\nfunction NetworkError({ status, message, data, statusText }) {\n  this.name = 'NetworkError'\n  this.message = message || statusText\n  this.status = status\n  this.data = data\n}\n\nNetworkError.prototype = Object.create(Error.prototype)\n\nconst nodeApi = axios.create({\n  baseURL: environment.nodeApiLink,\n  timeout: 1000 * 10,\n  crossDomain: true,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n})\n\nnodeApi.interceptors.response.use(\n  response => Promise.resolve(response),\n  error => Promise.reject(new NetworkError(error.response || error)),\n)\n\nexport default nodeApi\n","import React, { Fragment, Component } from 'react'\nimport { faSync } from '@fortawesome/free-solid-svg-icons'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { format } from 'date-fns'\nimport InfoCard from '../../common/InfoCard'\nimport SynchCard from '../../elements/SynchCard'\nimport nodeApi from '../../../api/api'\n\nexport default class Dashboard extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      nodeInfo: null,\n    }\n  }\n\n  componentDidMount() {\n    this.setNodeCurrentState()\n    this.setTimer()\n  }\n\n  getNodeCurrentState = () => nodeApi.get('/info')\n\n  setNodeCurrentState = async () => {\n    const { data: nodeInfo } = await this.getNodeCurrentState()\n    this.setState({ nodeInfo })\n  }\n\n  setTimer = () => {\n    const timerId = setInterval(this.setNodeCurrentState, 2000)\n    this.setState({ timerId })\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.state.timerId)\n  }\n\n  render() {\n    if (this.state.nodeInfo === null) {\n      return (\n        <Fragment>\n          <div className=\"container-fluid h-100 d-flex align-items-center justify-content-center\">\n            <FontAwesomeIcon\n              className=\"h1\"\n              icon={faSync}\n              spin\n            ></FontAwesomeIcon>\n          </div>\n        </Fragment>\n      )\n    }\n\n    const {\n      peersCount,\n      bestHeaderId,\n      launchTime,\n      fullHeight,\n      appVersion,\n      isMining,\n    } = this.state.nodeInfo\n\n    return (\n      <Fragment>\n        <div className=\"container-fluid\">\n          <div className=\"row\">\n            <div className=\"col-3 p-0 border-right mb-3\">\n              <InfoCard className=\"card rounded-0 shadow-none border-bottom\">\n                <p className=\"info-card__title\">Node version</p>\n                <p className=\"info-card__label\">{appVersion}</p>\n              </InfoCard>\n            </div>\n            <div className=\"col-3 p-0 border-right mb-3\">\n              <SynchCard\n                nodeInfo={this.state.nodeInfo}\n                className=\"border-bottom\"\n              ></SynchCard>\n            </div>\n            <div className=\"col-3 p-0 border-right mb-3\">\n              <InfoCard className=\"rounded-0 shadow-none border-bottom\">\n                <p className=\"info-card__title\">Node started at</p>\n                <p className=\"info-card__label\">\n                  {format(new Date(launchTime), 'MM-dd-yyyy HH:mm:ss')}\n                </p>\n              </InfoCard>\n            </div>\n            {fullHeight === null ? null : (\n              <div className=\"col-3 p-0 border-right mb-3\">\n                <InfoCard className=\"rounded-0 shadow-none border-bottom\">\n                  <p className=\"info-card__title\">Current height</p>\n                  <p className=\"info-card__label\">{fullHeight}</p>\n                </InfoCard>\n              </div>\n            )}\n            {bestHeaderId === null ? null : (\n              <div className=\"col-3 p-0 border-right mb-3\">\n                <InfoCard className=\"rounded-0 shadow-none border-bottom\">\n                  <p className=\"info-card__title\">Best block id</p>\n                  <p className=\"info-card__label\">{bestHeaderId}</p>\n                </InfoCard>\n              </div>\n            )}\n            <div className=\"col-3 p-0 border-right mb-3\">\n              <InfoCard className=\"rounded-0 shadow-none border-bottom\">\n                <p className=\"info-card__title\">Mining enabled</p>\n                <p className=\"info-card__label\">\n                  {isMining ? 'true' : 'false'}\n                </p>\n              </InfoCard>\n            </div>\n            <div className=\"col-3 p-0 border-right mb-3\">\n              <InfoCard className=\"rounded-0 shadow-none border-bottom\">\n                <p className=\"info-card__title\">Peers connected</p>\n                <p className=\"info-card__label\">{peersCount}</p>\n              </InfoCard>\n            </div>\n          </div>\n        </div>\n      </Fragment>\n    )\n  }\n}\n","import React from 'react'\nimport copy from 'clipboard-copy'\nimport { Overlay, Tooltip } from 'react-bootstrap'\nimport { faCopy } from '@fortawesome/free-solid-svg-icons'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\n\nclass CopyToClipboard extends React.PureComponent {\n  constructor(props) {\n    super(props)\n\n    this.myRef = React.createRef()\n    this.state = { showTooltip: false }\n  }\n\n  render() {\n    return (\n      <>\n        <a\n          href=\"#copyClipboard\"\n          ref={this.myRef}\n          onClick={this.onCopy}\n          className=\"font-weight-bold text-decoration-none\"\n        >\n          {this.props.children}\n          &nbsp;\n          <FontAwesomeIcon icon={faCopy} />\n        </a>\n        <Overlay\n          target={this.myRef.current}\n          show={this.state.showTooltip}\n          placement=\"right\"\n        >\n          <Tooltip>Copied!</Tooltip>\n        </Overlay>\n      </>\n    )\n  }\n\n  startTimer = () => {\n    const timerId = setTimeout(\n      () => this.setState({ showTooltip: false }),\n      1500,\n    )\n    this.setState({ timerId })\n  }\n\n  onCopy = e => {\n    e.preventDefault()\n    copy(this.props.children)\n    this.setState({ showTooltip: true })\n    this.startTimer()\n  }\n\n  handleOnTooltipClose = () => {\n    this.setState({ showTooltip: false })\n  }\n\n  componentWillUnmount() {\n    clearTimeout(this.state.timerId)\n  }\n}\n\nexport default CopyToClipboard\n","import { toast } from 'react-toastify'\nimport './index.scss'\n\nconst toastStates = {\n  success: (text, options) =>\n    toast.success(text, {\n      position: 'top-right',\n      autoClose: 5000,\n      hideProgressBar: false,\n      closeOnClick: true,\n      pauseOnHover: true,\n      draggable: true,\n      className: 'n-toast n-toast--success',\n      bodyClassName: 'n-toast__body',\n      progressClassName: 'n-toast__progress--success',\n      ...options,\n    }),\n  error: (text, options) =>\n    toast.error(text, {\n      position: 'top-right',\n      autoClose: 5000,\n      hideProgressBar: false,\n      closeOnClick: true,\n      pauseOnHover: true,\n      draggable: true,\n      className: 'n-toast n-toast--error',\n      bodyClassName: 'n-toast__body',\n      progressClassName: 'n-toast__progress--error',\n      ...options,\n    }),\n  info: toast.info,\n}\n\nexport default (state, text, options) =>\n  toastStates[state]\n    ? toastStates[state](text, options)\n    : new Error(`Bad toast state`)\n","import React, { PureComponent } from 'react'\nimport { Formik, Field, Form } from 'formik'\nimport nodeApi from '../../../../api/api'\nimport { ApiKeyContext } from '../../../../context/context'\nimport CopyToClipboard from '../../../common/CopyToClipboard'\nimport customToast from '../../../../utils/toast'\n\nconst initialFormValues = {\n  pass: '',\n  mnemonicPass: '',\n}\n\nclass WalletInitializeForm extends PureComponent {\n  static contextType = ApiKeyContext\n\n  state = { isShowMnemonic: false }\n\n  walletInit = async values => {\n    const { data } = await nodeApi.post('/wallet/init', values, {\n      headers: {\n        api_key: this.context.value,\n      },\n    })\n\n    return data\n  }\n\n  handleSubmit = (values, { setSubmitting, resetForm, setStatus }) => {\n    setStatus({ status: 'submitting' })\n    this.walletInit(values)\n      .then(result => {\n        resetForm(initialFormValues)\n        setStatus({\n          state: 'success',\n          msg: (\n            <>\n              Your wallet success initialized. Please, save your mnemonic -{' '}\n              <CopyToClipboard>{result.mnemonic}</CopyToClipboard>\n            </>\n          ),\n        })\n        this.setState({ isShowMnemonic: true })\n      })\n      .catch(err => {\n        const errMessage = err.data ? err.data.detail : err.message\n        customToast('error', errMessage)\n        setSubmitting(false)\n      })\n  }\n\n  render() {\n    return (\n      <div className=\"col-4\">\n        <div className=\"card bg-white p-4 mb-4\">\n          <h2 className=\"h5 mb-3\">Initialize Wallet</h2>\n          <Formik\n            initialValues={initialFormValues}\n            onSubmit={this.handleSubmit}\n          >\n            {({ status, isSubmitting }) => (\n              <Form>\n                {status && status.state === 'error' && (\n                  <div className=\"alert alert-danger\" role=\"alert\">\n                    {status.msg}\n                  </div>\n                )}\n                {status &&\n                  status.state === 'success' &&\n                  this.state.isShowMnemonic && (\n                    <div className=\"alert alert-success alert-dismissible\">\n                      <button\n                        type=\"button\"\n                        className=\"close\"\n                        onClick={() => this.setState({ isShowMnemonic: false })}\n                      >\n                        <span aria-hidden=\"true\">&times;</span>\n                      </button>\n                      {status.msg}\n                    </div>\n                  )}\n                <div className=\"form-group\">\n                  <label htmlFor=\"wallet-password-input\">Wallet password</label>\n                  <Field\n                    name=\"walletPassword\"\n                    type=\"password\"\n                    id=\"wallet-password-input\"\n                    className=\"form-control\"\n                    placeholder=\"Enter wallet password\"\n                  />\n                </div>\n                <div className=\"form-group\">\n                  <label htmlFor=\"mnemonic-password-input\">\n                    Mnemonic password\n                  </label>\n                  <Field\n                    name=\"mnemonicPass\"\n                    type=\"password\"\n                    id=\"mnemonic-password-input\"\n                    className=\"form-control\"\n                    placeholder=\"Enter mnemonic password\"\n                  />\n                </div>\n                <button\n                  type=\"submit\"\n                  className=\"btn btn-primary\"\n                  disabled={isSubmitting}\n                >\n                  Send\n                </button>\n              </Form>\n            )}\n          </Formik>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default WalletInitializeForm\n","import React, { PureComponent } from 'react'\nimport { Formik, Field, Form } from 'formik'\nimport nodeApi from '../../../../api/api'\nimport { ApiKeyContext } from '../../../../context/context'\nimport customToast from '../../../../utils/toast'\n\nconst initialFormValues = {\n  walletPassword: '',\n  mnemonicPass: '',\n  mnemonic: '',\n}\n\nclass WalletInitializeForm extends PureComponent {\n  static contextType = ApiKeyContext\n\n  walletRestore = async ({ walletPassword, mnemonicPass, mnemonic }) => {\n    return nodeApi.post(\n      '/wallet/restore',\n      { pass: walletPassword, mnemonicPass, mnemonic },\n      {\n        headers: {\n          api_key: this.context.value,\n        },\n      },\n    )\n  }\n\n  handleSubmit = (values, { setSubmitting, resetForm, setStatus }) => {\n    setStatus({ status: 'submitting' })\n    this.walletRestore(values)\n      .then(() => {\n        resetForm(initialFormValues)\n        customToast('success', 'Your wallet success re-stored')\n      })\n      .catch(err => {\n        const errMessage = err.data ? err.data.detail : err.message\n        customToast('error', errMessage)\n        setSubmitting(false)\n      })\n  }\n\n  render() {\n    return (\n      <div className=\"col-4\">\n        <div className=\"card bg-white p-4 mb-4\">\n          <h2 className=\"h5 mb-3\">Restore Wallet</h2>\n          <Formik\n            initialValues={initialFormValues}\n            onSubmit={this.handleSubmit}\n          >\n            {({ status, isSubmitting }) => (\n              <Form>\n                {status && status.state === 'error' && (\n                  <div className=\"alert alert-danger\" role=\"alert\">\n                    {status.msg}\n                  </div>\n                )}\n                {status && status.state === 'success' && (\n                  <div className=\"alert alert-success\">{status.msg}</div>\n                )}\n                <div className=\"form-group\">\n                  <label htmlFor=\"restore-mnemonic-input\">Mnemonic</label>\n                  <Field\n                    name=\"mnemonic\"\n                    type=\"text\"\n                    id=\"restore-mnemonic-input\"\n                    className=\"form-control\"\n                    placeholder=\"Enter mnemonic\"\n                  />\n                </div>\n                <div className=\"form-group\">\n                  <label htmlFor=\"restore-wallet-password-input\">\n                    Wallet password\n                  </label>\n                  <Field\n                    name=\"walletPassword\"\n                    type=\"password\"\n                    id=\"restore-wallet-password-input\"\n                    className=\"form-control\"\n                    placeholder=\"Enter wallet password\"\n                  />\n                </div>\n                <div className=\"form-group\">\n                  <label htmlFor=\"restore-mnemonic-password-input\">\n                    Mnemonic password\n                  </label>\n                  <Field\n                    name=\"mnemonicPass\"\n                    type=\"password\"\n                    id=\"restore-mnemonic-password-input\"\n                    className=\"form-control\"\n                    placeholder=\"Enter mnemonic password\"\n                  />\n                </div>\n                <button\n                  type=\"submit\"\n                  className=\"btn btn-primary\"\n                  disabled={isSubmitting}\n                >\n                  Send\n                </button>\n              </Form>\n            )}\n          </Formik>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default WalletInitializeForm\n","import React, { PureComponent } from 'react'\nimport { Formik, Field, Form } from 'formik'\nimport nodeApi from '../../../../api/api'\nimport { ApiKeyContext } from '../../../../context/context'\nimport customToast from '../../../../utils/toast'\nimport CopyToClipboard from '../../../common/CopyToClipboard'\n\nconst initialFormValues = {\n  walletPassword: '',\n  recipientAddress: '',\n  amount: '',\n}\n\nclass PaymentSendForm extends PureComponent {\n  static contextType = ApiKeyContext\n\n  state = {\n    isShowTransactionId: false,\n  }\n\n  paymentSend = async ({ walletPassword, recipientAddress, amount }) => {\n    await nodeApi.post(\n      '/wallet/unlock',\n      { pass: walletPassword },\n      {\n        headers: {\n          api_key: this.context.value,\n        },\n      },\n    )\n\n    const data = await nodeApi.post(\n      '/wallet/payment/send',\n      [\n        {\n          address: recipientAddress,\n          value: Number(amount * 100000000),\n        },\n      ],\n      {\n        headers: {\n          api_key: this.context.value,\n        },\n      },\n    )\n\n    await nodeApi.get('/wallet/lock', {\n      headers: {\n        api_key: this.context.value,\n      },\n    })\n\n    return data\n  }\n\n  handleSubmit = (values, { setSubmitting, resetForm, setStatus }) => {\n    setStatus({ status: 'submitting' })\n    this.paymentSend(values)\n      .then(({ data }) => {\n        resetForm(initialFormValues)\n        setStatus({\n          state: 'success',\n          msg: (\n            <>\n              Your payment successfully sent. Your transaction ID -{' '}\n              <CopyToClipboard>{data}</CopyToClipboard>\n            </>\n          ),\n        })\n        this.setState({ isShowTransactionId: true })\n      })\n      .catch(err => {\n        const errMessage = err.data ? err.data.detail : err.message\n        customToast('error', errMessage)\n        setSubmitting(false)\n      })\n  }\n\n  render() {\n    return (\n      <div className=\"col-4\">\n        <div className=\"card bg-white p-4 mb-4\">\n          <h2 className=\"h5 mb-3\">Payment Send</h2>\n          <Formik\n            initialValues={initialFormValues}\n            onSubmit={this.handleSubmit}\n          >\n            {({ status, isSubmitting }) => (\n              <Form>\n                {status &&\n                  status.state === 'success' &&\n                  this.state.isShowTransactionId && (\n                    <div className=\"alert alert-success alert-dismissible\">\n                      <button\n                        type=\"button\"\n                        className=\"close\"\n                        onClick={() =>\n                          this.setState({ isShowTransactionId: false })\n                        }\n                      >\n                        <span aria-hidden=\"true\">&times;</span>\n                      </button>\n                      {status.msg}\n                    </div>\n                  )}\n                <div className=\"form-group\">\n                  <label htmlFor=\"wallet-password-input\">\n                    Wallet password *\n                  </label>\n                  <Field\n                    name=\"walletPassword\"\n                    type=\"password\"\n                    id=\"wallet-password-input\"\n                    className=\"form-control\"\n                    placeholder=\"Enter wallet password\"\n                  />\n                  <small\n                    id=\"walletPasswordHelp\"\n                    className=\"form-text text-muted\"\n                  >\n                    * If you have it <b>or leave field empty</b>\n                  </small>\n                </div>\n                <div className=\"form-group\">\n                  <label htmlFor=\"recipient-address\">Recipient address</label>\n                  <Field\n                    type=\"text\"\n                    name=\"recipientAddress\"\n                    id=\"recipient-address-input\"\n                    className=\"form-control\"\n                    placeholder=\"Enter recipient address\"\n                  />\n                </div>\n                <div className=\"form-group\">\n                  <label htmlFor=\"amount\">Amount</label>\n                  <Field\n                    type=\"text\"\n                    name=\"amount\"\n                    id=\"amount-input\"\n                    className=\"form-control\"\n                    placeholder=\"Minimum 0.001 ERG\"\n                  />\n                </div>\n                <button\n                  type=\"submit\"\n                  className=\"btn btn-primary\"\n                  disabled={isSubmitting}\n                >\n                  Send\n                </button>\n              </Form>\n            )}\n          </Formik>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default PaymentSendForm\n","import React, { PureComponent } from 'react'\nimport { Formik, Field, Form } from 'formik'\nimport NumberFormat from 'react-number-format'\nimport nodeApi from '../../../../api/api'\nimport { ApiKeyContext } from '../../../../context/context'\nimport customToast from '../../../../utils/toast'\n\nconst initialFormValues = {\n  walletPassword: '',\n}\n\nclass GetBalanceForm extends PureComponent {\n  static contextType = ApiKeyContext\n\n  state = {\n    isShowBalance: false,\n  }\n\n  getBalance = async ({ walletPassword }) => {\n    await nodeApi.post(\n      '/wallet/unlock',\n      { pass: walletPassword },\n      {\n        headers: {\n          api_key: this.context.value,\n        },\n      },\n    )\n\n    const balance = await nodeApi.get('/wallet/balances', {\n      headers: {\n        api_key: this.context.value,\n      },\n    })\n\n    await nodeApi.get('/wallet/lock', {\n      headers: {\n        api_key: this.context.value,\n      },\n    })\n\n    return balance\n  }\n\n  handleSubmit = (values, { setSubmitting, resetForm, setStatus }) => {\n    setStatus({ status: 'submitting' })\n    this.getBalance(values)\n      .then(({ data: { balance } }) => {\n        resetForm(initialFormValues)\n        setStatus({\n          state: 'success',\n          msg: (\n            <>\n              Your wallet balance -{' '}\n              <NumberFormat\n                value={(balance / 1000000000).toFixed(8)}\n                displayType={'text'}\n                thousandSeparator={true}\n                suffix={' ERG'}\n                className=\"font-weight-bold\"\n              />\n            </>\n          ),\n        })\n        this.setState({ isShowBalance: true })\n      })\n      .catch(err => {\n        const errMessage = err.data ? err.data.detail : err.message\n        customToast('error', errMessage)\n        setSubmitting(false)\n      })\n  }\n\n  render() {\n    return (\n      <div className=\"col-4\">\n        <div className=\"card bg-white p-4 mb-4\">\n          <h2 className=\"h5 mb-3\">Get confirmed wallet balance</h2>\n          <Formik\n            initialValues={initialFormValues}\n            onSubmit={this.handleSubmit}\n          >\n            {({ status, isSubmitting }) => (\n              <Form>\n                {status &&\n                  status.state === 'success' &&\n                  this.state.isShowBalance && (\n                    <div className=\"alert alert-info alert-dismissible\">\n                      <button\n                        type=\"button\"\n                        className=\"close\"\n                        onClick={() => this.setState({ isShowBalance: false })}\n                      >\n                        <span aria-hidden=\"true\">&times;</span>\n                      </button>\n                      {status.msg}\n                    </div>\n                  )}\n                <div className=\"form-group\">\n                  <label htmlFor=\"wallet-password-input\">\n                    Wallet password *\n                  </label>\n                  <Field\n                    name=\"walletPassword\"\n                    type=\"password\"\n                    id=\"wallet-password-input\"\n                    className=\"form-control\"\n                    placeholder=\"Enter wallet password\"\n                  />\n                  <small\n                    id=\"walletPasswordHelp\"\n                    className=\"form-text text-muted\"\n                  >\n                    * If you have it <b>or leave field empty</b>\n                  </small>\n                </div>\n                <button\n                  type=\"submit\"\n                  className=\"btn btn-primary\"\n                  disabled={isSubmitting}\n                >\n                  Send\n                </button>\n              </Form>\n            )}\n          </Formik>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default GetBalanceForm\n","import React, { PureComponent } from 'react'\nimport { Formik, Field, Form } from 'formik'\nimport nodeApi from '../../../../api/api'\nimport { ApiKeyContext } from '../../../../context/context'\nimport customToast from '../../../../utils/toast'\nimport CopyToClipboard from '../../../common/CopyToClipboard'\n\nconst initialFormValues = {\n  walletPassword: '',\n}\n\nclass GetWalletAddressesForm extends PureComponent {\n  static contextType = ApiKeyContext\n\n  state = {\n    isShowWalletAddresses: false,\n  }\n\n  getWalletAddresses = async ({ walletPassword }) => {\n    await nodeApi.post(\n      '/wallet/unlock',\n      { pass: walletPassword },\n      {\n        headers: {\n          api_key: this.context.value,\n        },\n      },\n    )\n\n    const walletAddresses = await nodeApi.get('/wallet/addresses', {\n      headers: {\n        api_key: this.context.value,\n      },\n    })\n\n    const walletMinerAddress = await nodeApi.get('/mining/rewardAddress', {\n      headers: {\n        api_key: this.context.value,\n      },\n    })\n\n    await nodeApi.get('/wallet/lock', {\n      headers: {\n        api_key: this.context.value,\n      },\n    })\n\n    return [walletAddresses, walletMinerAddress]\n  }\n\n  handleSubmit = (values, { setSubmitting, resetForm, setStatus }) => {\n    setStatus({ status: 'submitting' })\n    this.getWalletAddresses(values)\n      .then(([{ data: walletAddresses }, { data: { rewardAddress } }]) => {\n        resetForm(initialFormValues)\n        setStatus({\n          state: 'success',\n          msg: (\n            <>\n              <p className=\"mb-1\">Wallet Addresses:</p>\n              <ul className=\"mb-3\">\n                {walletAddresses.map(addr => (\n                  <>\n                    <li className=\"mb-1\">\n                      <CopyToClipboard>{addr}</CopyToClipboard>\n                    </li>\n                  </>\n                ))}\n              </ul>\n              <p>\n                Miner Address -{' '}\n                <CopyToClipboard>{rewardAddress}</CopyToClipboard>\n              </p>\n            </>\n          ),\n        })\n        this.setState({ isShowWalletAddresses: true })\n      })\n      .catch(err => {\n        const errMessage = err.data ? err.data.detail : err.message\n        customToast('error', errMessage)\n        setSubmitting(false)\n      })\n  }\n\n  render() {\n    return (\n      <div className=\"col-4\">\n        <div className=\"card bg-white p-4 mb-4\">\n          <h2 className=\"h5 mb-3\">Get all wallet addresses (with miner)</h2>\n          <Formik\n            initialValues={initialFormValues}\n            onSubmit={this.handleSubmit}\n          >\n            {({ status, isSubmitting }) => (\n              <Form>\n                {status &&\n                  status.state === 'success' &&\n                  this.state.isShowWalletAddresses && (\n                    <div className=\"alert alert-info alert-dismissible\">\n                      <button\n                        type=\"button\"\n                        className=\"close\"\n                        onClick={() =>\n                          this.setState({ isShowWalletAddresses: false })\n                        }\n                      >\n                        <span aria-hidden=\"true\">&times;</span>\n                      </button>\n                      {status.msg}\n                    </div>\n                  )}\n                <div className=\"form-group\">\n                  <label htmlFor=\"wallet-password-input\">\n                    Wallet password *\n                  </label>\n                  <Field\n                    name=\"walletPassword\"\n                    type=\"password\"\n                    id=\"wallet-password-input\"\n                    className=\"form-control\"\n                    placeholder=\"Enter wallet password\"\n                  />\n                  <small\n                    id=\"walletPasswordHelp\"\n                    className=\"form-text text-muted\"\n                  >\n                    * If you have it <b>or leave field empty</b>\n                  </small>\n                </div>\n                <button\n                  type=\"submit\"\n                  className=\"btn btn-primary\"\n                  disabled={isSubmitting}\n                >\n                  Send\n                </button>\n              </Form>\n            )}\n          </Formik>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default GetWalletAddressesForm\n","import React, { Component } from 'react'\nimport { ApiKeyContext } from '../../../context/context'\nimport WalletInitializeForm from '../../elements/wallet/WalletInitializeForm'\nimport RestoreWalletForm from '../../elements/wallet/RestoreWalletForm'\nimport PaymentSendForm from '../../elements/wallet/PaymentSendForm'\nimport GetBalanceForm from '../../elements/wallet/GetBalanceForm'\nimport GetWalletAddressesForm from '../../elements/wallet/GetWalletAddressesForm'\n\nclass Wallet extends Component {\n  static contextType = ApiKeyContext\n\n  render() {\n    if (this.context.value === '') {\n      return (\n        <div className=\"container-fluid pt-4\">\n          <p>For continue need to set API key.</p>\n        </div>\n      )\n    }\n\n    return (\n      <div className=\"container-fluid pt-4\">\n        <div className=\"row\">\n          <WalletInitializeForm />\n          <RestoreWalletForm />\n          <GetBalanceForm />\n          <GetWalletAddressesForm />\n          <PaymentSendForm />\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Wallet\n","import React from 'react'\nimport { BrowserRouter, Switch, Route } from 'react-router-dom'\nimport Layout from '../components/layout'\nimport Dashboard from '../components/pages/Dashboard'\nimport Wallet from '../components/pages/Wallet'\n\nconst Router = () => (\n  <BrowserRouter basename=\"/panel\">\n    <Layout>\n      <Switch>\n        <Route exact path=\"/\" component={Dashboard} />\n        <Route exact path=\"/wallet\" component={Wallet} />\n      </Switch>\n    </Layout>\n  </BrowserRouter>\n)\n\nexport default Router\n","import React, { Component } from 'react'\nimport { toast } from 'react-toastify'\nimport { ApiKeyContext } from './context/context'\nimport Router from './router/router'\n\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport './assets/styles/index.scss'\nimport 'react-toastify/dist/ReactToastify.min.css'\n\ntoast.configure()\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n\n    this.setApikey = apiKey => {\n      this.setState(prevState => ({\n        apiKey: { ...prevState.apiKey, value: apiKey },\n      }))\n    }\n\n    this.state = {\n      apiKey: {\n        value: '',\n        setApiKey: this.setApikey,\n      },\n    }\n  }\n\n  render() {\n    return (\n      <ApiKeyContext.Provider value={this.state.apiKey}>\n        <Router />\n      </ApiKeyContext.Provider>\n    )\n  }\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n","module.exports = __webpack_public_path__ + \"static/media/logotype_white.4dcfd639.svg\";"],"sourceRoot":""}