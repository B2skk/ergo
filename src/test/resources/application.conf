ergo {
  # Directory to keep data
  directory = ${user.dir}"/ergo/data"

  # Settings for node view holder regime. See papers.yellow.ModifiersProcessing.md
  node {
    # State type.  Possible options are:
    # "utxo" - keep full utxo set, that allows to validate arbitrary block and generate ADProofs
    # "digest" - keep state root hash only and validate transactions via ADProofs
    stateType = "utxo"

    # Download block transactions and verify them (requires BlocksToKeep == 0 if disabled)
    verifyTransactions = true

    # Number of last blocks to keep with transactions and ADproofs, for all other blocks only header will be stored.
    # Keep all blocks from genesis if negative
    blocksToKeep = 1000

    # Download PoPoW proof on node bootstrap
    PoPoWBootstrap = false

    # Minimal suffix size for PoPoW proof (may be pre-defined constant or settings parameter)
    minimalSuffix = 10

    # Is the node is doing mining
    mining = false

    useExternalMiner = false

    # Public key mining rewards will be dedicated to
    miningPubKeyHex = null

    # If true, a node generates blocks being offline. The only really useful case for it probably is to start a new
    # blockchain
    offlineGeneration = false

    # Delay for miner after succesful block creation
    miningDelay = 1s

    mempoolCapacity = 100000

    blacklistCapacity = 100000

    mempoolCleanupDuration = 10s
  }

  #Chain-specific settings. Change only if you are going to launch a new chain!
  chain {

    monetary {
      # delay between the block mined and a time, when the reward can be spent. ~ 1 day.
      minerRewardDelay = -1000
    }

    # Public keys of founders for tests. Two keys from defaultProver and one random one.
    foundersPubkeys = [
      "0326df75ea615c18acc6bb4b517ac82795872f388d5d180aac90eaa84de750b942",
      "0201aa15a0042c3552bff1ee6168d7b3dc8bc155adf909ee9f7eadf811c83727d4",
      "0248502b73f35bb2b77eb5ad16f80f55beff178ccd104488edd2d8b69c192c109d"
    ]

    # Base16 representation of genesis state roothash
    genesisStateDigestHex = "55dbb6baf761a0969a00d5abb68100d0ae97275374d6b8505a2302b2bd5d17bf02"

    # Network address prefix, currently reserved values are 0x00 (money chain mainnet) and 0x10 (16 in decimal,
    # money chain testnet)
    addressPrefix = 16

    # Desired time interval between blocks
    blockInterval = 1m

    # Difficulty network start with
    initialDifficultyHex = "01"

    # length of an epoch in difficulty recalculation
    epochLength = 100

    //Proof-of-Work algorithm and its parameters. Possible options are "fake" and "autolykos".
    powScheme {
      powType = "fake"
    }

  }

  wallet {

    secretStorage {

      secretDir = ${user.dir}"/.keystore/ergo/"

      encryption {

        # Pseudo-random function with output of length `dkLen` (PBKDF2 param)
        prf = "HmacSHA256"

        # Number of PBKDF2 iterations (PBKDF2 param)
        c = 128000

        # Desired bit-length of the derived key (PBKDF2 param)
        dkLen = 256
      }

    }

    # Generating seed length in bits
    # Options: 128, 160, 192, 224, 256
    seedStrengthBits = 160

    # Language to be used in mnemonic seed
    # Options: "chinese_simplified", "chinese_traditional", "english", "french", "italian", "japanese", "korean", "spanish"
    mnemonicPhraseLanguage = "english"

    # Interval to re-scan uncertain boxes. When a block arrives, its transaction outputs are to be scanned, and if
    # certain bytes are found in the output script (e.g. public key bytes), the box is to be put to a queue of a boxes
    # which are potentially wallet's. But to be sure, script execution is needed, which could be costly to do in a bulk.
    # So we check from a queue only one box per "scanningInterval".
    scanningInterval = 1ms

    defaultTransactionFee = 10000

    # Mnemonic seed used in wallet for tests
    testMnemonic = "ozone drill grab fiber curtain grace pudding thank cruise elder eight picnic"
  }

}

scorex {
  restApi {
    apiKeyHash = null
  }
}

akka {
  test {
    timefactor = 3 # duration scale factor to prevent spurious test failures on the heavily loaded CI servers
  }
}
