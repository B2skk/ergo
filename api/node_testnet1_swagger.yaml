openapi: "3.0.0"

info:
  version: "0.1"
  title: Ergo Node API
  description: API docs for Ergo Node. Models are shared between all Ergo products.
  contact:
    name: Ergo Platform Team
    email: ergoplatform@protonmail.com
    url: https://ergoplatform.org
  license:
    name: CC0 1.0 Universal
    url: https://raw.githubusercontent.com/ergoplatform/ergo/master/LICENSE

servers:
  # todo make it real
  - url: https://nodes.ergoplatform.com/api/
    description: Testnet1

components:
  schemas:
    # Objects
    AnyoneCanSpendTransactionInput:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/TransactionId'
        index:
          $ref: '#/components/schemas/Index'

    AnyoneCanSpendTransactionOutput:
      type: object
      properties:
        amount:
          $ref: '#/components/schemas/Amount'

    AnyoneCanSpendTransaction:
      type: object
      description: Transaction without any lockers and unlockers
      properties:
        id:
          $ref: '#/components/schemas/TransactionId'
        from:
          description: Many transaction inputs
          type: array
          items:
            $ref: '#/components/schemas/AnyoneCanSpendTransactionInput'
        to:
          description: Many transaction outputs
          type: array
          items:
            $ref: '#/components/schemas/AnyoneCanSpendTransactionOutput'

    Index:
      description: _Index_ | Index of a output in transaction
      type: integer
      minimum: 0
      example: 667

    Amount:
      description: _Amount_ | Amount of Ergo token
      # todo number or integer
      type: number
      minimum: 0
      example: 14.7

    TransactionId:
      description: _TransactionId_ | Base16-encoded transaction id bytes
      type: string
      # todo example
      example: 123

    FullBlock:
      description: Block with header and transactions
      type: object
      properties:
        header:
          $ref: '#/components/schemas/BlockHeader'
        transactions:
          $ref: '#/components/schemas/BlockTransactions'
        ADProofs:
          $ref: '#/components/schemas/BlockADProofs'

    BlockHeader:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ModifierId'
        timestamp:
          type: integer
          example: 1501505945003
        reference:
          $ref: '#/components/schemas/ModifierId'
        version:
           type: integer
           example: 2
        interlinks:
          # todo better description
          description: Interlinks
          type: array
          items:
            $ref: '#/components/schemas/AnyoneCanSpendTransactionOutput'
        ADProofsRoot:
          $ref: '#/components/schemas/Digest32'
        stateRoot:
          $ref: '#/components/schemas/ADDigest'
        transactionsRoot:
          $ref: '#/components/schemas/Digest32'
        nBits:
          # todo actually it is unsigned int?
          type: integer
        votes:
          $ref: '#/components/schemas/Votes'
        nonce:
          type: integer
          example: 324573
        equihashSolutions:
          description: Base58-encoded equihash solutions
          type: string
          # todo example
          example: 123
        height:
          $ref: '#/components/schemas/BlockHeight'

    BlockTransactions:
      type: object
      properties:
        headerId:
          $ref: '#/components/schemas/ModifierId'
        transactions:
          description: Anyone can spend transaction objects
          type: array
          items:
            $ref: '#/components/schemas/AnyoneCanSpendTransaction'

    ModifierId:
      description: _ModifierId_ | Base58-encoded modifier id
      type: string
      # todo example
      example: 123

    BlockADProofs:
      type: object
      properties:
        headerId:
          $ref: '#/components/schemas/ModifierId'
        proofBytes:
          $ref: '#/components/schemas/SerializedAdProof'
        digest:
          $ref: '#/components/schemas/Digest32'

    Digest32:
      description: _Digest32_ | Base58-encoded 32 byte digest
      type: string
      # todo example
      example: 123

    ADDigest:
      description: _ADDigest_ | Base58-encoded 33 byte digest - digest with extra byte with tree height
      type: string
      # todo example
      example: 123

    SerializedAdProof:
      description: _SerializedAdProof_ | Base58-encoded ad proofs
      type: string
      # todo example
      example: 123

    BlockHeight:
      description: _BlockHeight_ | Index of a block in blockchain
      type: integer
      minimum: 0
      example: 667

    Votes:
      description: _Votes_ | Base58-encoded votes array
      type: string
      # todo example?
      example: 667

    BlockSignature:
      description: _BlockSignature_ | Base58-encoded block signature
      type: string
      example: 3b2QWFpkTAP94ydewvRc6CyxRtcc7q6DpvYVFFfGERyy5sjD3pAVHdPCCDXi7XKDZePxHD35nJJroaQWUy6EZcmz

    Size:
      description: _Size_ | Number of items in the full response (`list` property may contain not all the items)
      type: integer
      example: 1

    Timestamp:
      description: _Timestamp_ | Transaction issue time in milliseconds
      type: integer
      example: 1501793408

    TransactionStatus:
      description: _TransactionStatus_ | Status of a transaction
      type: object
      properties:
        status:
          type: string
          enum:
            - "confirmed"
            - "uncomfirmed"
        confirmations:
          type: integer
          minimum: -1
          example: 327

    TransactionsCount:
      description: _TransactionsCount_ | Number of transactions in the unconfirmed transactions pool
      type: integer
      minimum: 0
      maximum: 10000
      example: 327

    PeersCount:
      description: _PeersCount_ | Number of connected peers
      type: integer
      minimum: 0
      example: 327

    Peer:
      type: object
      properties:
        address:
          type: string
          example: 127.0.0.1:5673
        name:
          type: string
          example: mynode
        nonce:
          type: integer
          example: 123456

  parameters:

    # Path-related

    path_BlockHeight:
      in: path
      name: blockHeight
      required: true
      description: Height of a wanted block
      schema:
        $ref: '#/components/schemas/BlockHeight'

    path_BlockId:
      in: path
      name: blockSignature
      required: true
      description: ID of a wanted block
      schema:
        $ref: '#/components/schemas/BlockSignature'

    path_TransactionId:
      in: path
      name: transactionId
      required: true
      description: ID of a wanted transaction
      schema:
        $ref: '#/components/schemas/TransactionId'

    # Query-related

    query_HeightFrom:
      in: query
      name: heightFrom
      required: false
      description: Height in the blockchain to start getting blocks at
      schema:
        $ref: '#/components/schemas/BlockHeight'

    query_HeightTo:
      in: query
      name: heightTo
      required: false
      description: Height in the blockchain to end getting blocks at
      schema:
        $ref: '#/components/schemas/BlockHeight'

    query_Limit:
      in: query
      name: limit
      required: false
      description: The number of items in list to return
      schema:
        type: integer
        minimum: 10
        maximum: 100
        default: 50

    query_Offset:
      in: query
      name: offset
      required: false
      description: The number of items in list to skip
      schema:
        type: integer
        default: 0

  requestBodies:
    AnyoneCanSpendTransaction:
      $ref: "#/components/schemas/AnyoneCanSpendTransaction"

    Peer:
      $ref: "#/components/schemas/Peer"

  responses:
    success_TransactionCreated:
      description: ID of the new transaction
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
                example: transaction.created
              transactionId:
                $ref: '#/components/schemas/TransactionId'

    success_PeerConnected:
      description: connected status
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
                example: peer.connected

    # Errors
    # todo nonce
    error_InvalidAddress:
      description: Provided address in invalid
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
                example: invalid.address

    error_InvalidAmount:
      description: Provided amount in invalid
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
                example: invalid.amount


    error_InvalidBlockHeight:
      description: Provided height is invalid
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
                example: invalid.block.height

    error_InvalidBlockId:
      description: Provided block signature is invalid
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
                example: invalid.block.signature

    error_InvalidTimestamp:
      description: Provided timestamp is invalid
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
                example: invalid.timestamp

    error_InvalidTransactionId:
      description: Provided transaction ID is invalid
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
                example: invalid.transaction.id

    error_InvalidSignature:
      description: Transaction signature doesn't match transaction data
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
                example: invalid.transaction.signature

    error_OffsetOutOfRange:
      description: Parameter `offset` is out of range
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
                example: offset.out.of.range

paths:
  /blocks:
    get:
      summary: Get the list of block ids
      tags:
        - blocks
      parameters:
        heightFrom: '#/components/parameters/query_HeightFrom'
        heightTo: '#/components/parameters/query_HeightTo'
        limit: '#/components/parameters/query_Limit'
        offset: '#/components/parameters/query_Offset'
      responses:
        200:
          # TODO : decide whether without `heightFrom` and/or `heightTo` the response will contain `limit` blocks stating from 0 + `offset`, or last `limit` blocks
          description: List of block ids
          content:
            application/json:
              schema:
                type: object
                properties:
                  size:
                    $ref: '#/components/schemas/Size'
                  blocks:
                    type: array
                    items:
                      $ref: '#/components/schemas/ModifierId'
        400:
          $ref: '#/components/responses/error_OffsetOutOfRange'

  /blocks/at/{blockHeight}:
    get:
      summary: Get the block ids at a given height
      tags:
        - blocks
      parameters:
        blockHeight: '#/components/parameters/path_BlockHeight'
      responses:
        200:
          description: Array of block ids
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ModifierId'
        400:
          $ref: '#/components/responses/error_InvalidBlockHeight'

  /blocks/{blockId}:
    get:
      summary: Get the full block info by a given signature
      tags:
        - blocks
      parameters:
        blockId: '#/components/parameters/path_BlockId'
      responses:
        200:
          description: Block object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FullBlock'
        400:
          $ref: '#/components/responses/error_InvalidBlockId'

  /blocks/{blockId}/header:
    get:
      summary: Get the block header info by a given signature
      tags:
        - blocks
      parameters:
        blockId: '#/components/parameters/path_BlockId'
      responses:
        200:
          description: Block header object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlockHeader'
        400:
          $ref: '#/components/responses/error_InvalidBlockId'

  /blocks/{blockId}/transactions:
    get:
      summary: Get the block transactions info by a given signature
      tags:
        - blocks
      parameters:
        blockId: '#/components/parameters/path_BlockId'
      responses:
        200:
          description: Block transaction object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlockTransactions'
        400:
          $ref: '#/components/responses/error_InvalidBlockId'

  /blocks/{blockId}/ADProofs:
    get:
      summary: Get the block transactions info by a given signature
      tags:
        - blocks
      parameters:
        blockId: '#/components/parameters/path_BlockId'
      responses:
        200:
          description: Block ADProofs object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlockADProofs'
        400:
          $ref: '#/components/responses/error_InvalidBlockId'

  /info:
    get:
      summary: Get the information about the Node
      tags:
        - info
      responses:
        200:
          description: Node info object
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    example: my-node-1
                  version:
                    type: string
                    example: 0.0.1
                  height:
                    $ref: '#/components/schemas/BlockHeight'
                  block_id:
                    $ref: '#/components/schemas/ModifierId'
                  previous_block_id:
                    $ref: '#/components/schemas/ModifierId'
                  peer_count:
                    $ref: '#/components/schemas/PeersCount'
                  unconfirmed_count:
                    $ref: '#/components/schemas/TransactionsCount'

  /transactions:
    post:
      summary: Send an anyone can spend transaction
      tags:
        - transactions
      requestBody:
        $ref: '#/components/requestBodies/AnyoneCanSpendTransaction'
      responses:
        200:
          $ref: '#/components/responses/success_TransactionCreated'
        400#1:
          $ref: '#/components/responses/error_InvalidSignature'
        400#2:
          $ref: '#/components/responses/error_InvalidAmount'
        400#3:
          $ref: '#/components/responses/error_InvalidTimestamp'

  /transactions/{transactionId}:
    get:
      summary: Get the details of a given transaction, its status and the height of block it belongs to
      tags:
        - transactions
      parameters:
        - $ref: '#/components/parameters/path_TransactionId'
      responses:
        200:
          description: Anyone can spend transactions object
          content:
            application/json:
              schema:
                type: object
                properties:
                  blockHeight:
                    $ref: '#/components/schemas/BlockHeight'
                  status:
                    $ref: '#/components/schemas/TransactionStatus'
                  transaction:
                    $ref: '#/components/schemas/AnyoneCanSpendTransaction'
        400:
          $ref: '#/components/responses/error_InvalidTransactionId'

  /transactions/unconfirmed:
    get:
      summary: Get current of the unconfirmed transactions pool
      tags:
        - transactions
      responses:
        200:
          description: Array with anyone can spend transactions objects
          content:
            application/json:
              schema:
                type: object
                properties:
                  utx:
                    type: array
                    items:
                    $ref: '#/components/schemas/AnyoneCanSpendTransaction'
        400:
          $ref: '#/components/responses/error_InvalidTransactionId'

  /transactions/unconfirmed/size:
    get:
      summary: Get current size of the unconfirmed transactions pool
      tags:
        - transactions
      responses:
        200:
          description: Object with UTX size
          content:
            application/json:
              schema:
                type: object
                properties:
                  size:
                    $ref: '#/components/schemas/TransactionsCount'

  /peers/all:
    get:
      summary: Get all known peers
      tags:
        - peers
      responses:
        200:
          description: Array of peer objects
          content:
            application/json:
              schema:
                type: object
                properties:
                  size:
                    $ref: '#/components/schemas/Peer'

  /peers/connected:
    get:
      summary: Get current connected peers
      tags:
        - peers
      responses:
        200:
          description: Array of peer objects
          content:
            application/json:
              schema:
                type: object
                properties:
                  size:
                    $ref: '#/components/schemas/Peer'

  /peers/connect:
    # todo post peers
    post:
      summary: Get current size of the unconfirmed transactions pool
      tags:
        - peers
      requestBody:
        $ref: '#/components/requestBodies/Peer'
      responses:
        200:
          $ref: '#/components/responses/success_PeerConnected'
        400#1:
          $ref: '#/components/responses/error_InvalidSignature'
        400#2:
          $ref: '#/components/responses/error_InvalidAmount'
        400#3:
          $ref: '#/components/responses/error_InvalidTimestamp'

  /peers/blacklisted:
    get:
      summary: Get blacklisted peers
      tags:
        - peers
      responses:
        200:
          description: Array of peer objects
          content:
            application/json:
              schema:
                type: object
                properties:
                  size:
                    $ref: '#/components/schemas/Peer'